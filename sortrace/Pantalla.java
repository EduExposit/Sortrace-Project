/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sortrace;

import java.awt.*;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.*;
import java.net.URL;
import java.util.ArrayList;
import javax.imageio.*;
import javax.imageio.metadata.IIOMetadata;
import javax.imageio.metadata.IIOMetadataNode;
import javax.imageio.stream.ImageOutputStream;
import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.BadLocationException;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.help.HelpBroker;
import javax.help.HelpSet;
import javax.help.HelpSetException;
import javax.help.Presentation;
import sortrace.algoritmos.*;
import sortrace.auxiliar.TeoriaAlgoritmo;
import sortrace.auxiliar.Vector;
import sortrace.vistas.VistaVector;
import util.ayuda.IU_Ayuda;
import util.filtros.FiltroTxt;

import static java.lang.Thread.sleep;

/**
 *
 * @author usuario
 */
public class Pantalla extends javax.swing.JFrame {

    /**
     * Creates new form Pantalla
     */
    public Pantalla() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        UIManager.put("FileChooser.saveButtonText",Sortrace.getIdioma().getProperty("fileChoserGuardar"));
        UIManager.put("FileChooser.openButtonText",Sortrace.getIdioma().getProperty("fileChoserAbrir"));
        UIManager.put("FileChooser.cancelButtonText",Sortrace.getIdioma().getProperty("fileChoserCancelar"));
        UIManager.put("FileChooser.updateButtonText",Sortrace.getIdioma().getProperty("fileChoserActualizar"));
        UIManager.put("FileChooser.helpButtonText",Sortrace.getIdioma().getProperty("fileChoserAyuda"));
        UIManager.put("FileChooser.saveButtonToolTipText",Sortrace.getIdioma().getProperty("fileChoserToolTip"));
        UIManager.put("FileChooser.openDialogTitleText", Sortrace.getIdioma().getProperty("fileChoserDialogAbrir"));
        UIManager.put("FileChooser.saveDialogTitleText", Sortrace.getIdioma().getProperty("fileChoserDialogGuardar"));
        UIManager.put("FileChooser.lookInLabelText", Sortrace.getIdioma().getProperty("fileChoserMirarEn"));
        UIManager.put("FileChooser.saveInLabelText", Sortrace.getIdioma().getProperty("fileChoserGuardarEn"));
        UIManager.put("FileChooser.openButtonText", Sortrace.getIdioma().getProperty("fileChoserAbrir"));
        UIManager.put("FileChooser.cancelButtonText", Sortrace.getIdioma().getProperty("fileChoserCancelar"));
        UIManager.put("FileChooser.fileNameLabelText", Sortrace.getIdioma().getProperty("fileChoserNameLabelText"));
        UIManager.put("FileChooser.folderNameLabelText", Sortrace.getIdioma().getProperty("fileChoserFolderLabelText"));
        UIManager.put("FileChooser.filesOfTypeLabelText", Sortrace.getIdioma().getProperty("filesChoserOfTypeLabelText"));
        UIManager.put("FileChooser.openButtonToolTipText", Sortrace.getIdioma().getProperty("fileChoseropenButtonToolTipText"));
        UIManager.put("FileChooser.cancelButtonToolTipText",Sortrace.getIdioma().getProperty("fileChosercancelButtonToolTipText"));
        UIManager.put("FileChooser.fileNameHeaderText",Sortrace.getIdioma().getProperty("fileChoserfileNameHeaderText"));
        UIManager.put("FileChooser.upFolderToolTipText", Sortrace.getIdioma().getProperty("fileChoserupFolderToolTipText"));
        UIManager.put("FileChooser.homeFolderToolTipText",Sortrace.getIdioma().getProperty("fileChoserhomeFolderToolTipText"));
        UIManager.put("FileChooser.newFolderToolTipText",Sortrace.getIdioma().getProperty("fileChosernewFolderToolTipText"));
        UIManager.put("FileChooser.listViewButtonToolTipText",Sortrace.getIdioma().getProperty("fileChoserlistViewButtonToolTipText"));
        UIManager.put("FileChooser.newFolderButtonText",Sortrace.getIdioma().getProperty("fileChosernewFolderButtonText"));
        UIManager.put("FileChooser.renameFileButtonText", Sortrace.getIdioma().getProperty("fileChoserrenameFileButtonText"));
        UIManager.put("FileChooser.deleteFileButtonText", Sortrace.getIdioma().getProperty("fileChoserdeleteFileButtonText"));
        UIManager.put("FileChooser.filterLabelText", Sortrace.getIdioma().getProperty("fileChoserfilterLabelText"));
        UIManager.put("FileChooser.detailsViewButtonToolTipText", Sortrace.getIdioma().getProperty("fileChoserdetailsViewButtonToolTipText"));
        UIManager.put("FileChooser.fileSizeHeaderText",Sortrace.getIdioma().getProperty("fileChoserfileSizeHeaderText"));
        UIManager.put("FileChooser.fileDateHeaderText", Sortrace.getIdioma().getProperty("fileChoserfileDateHeaderText"));

        UIManager.put("TabbedPane.selected", Color.gray); // set the color of selected tab to gray
        this.setVisible(true);
        jToolBar1 = new javax.swing.JToolBar();
        panelTexto = new JTextPane();
        panelTexto2 = new JTextPane();
        boton1 = new javax.swing.JButton();
        boton2 = new javax.swing.JButton();
        boton3 = new javax.swing.JButton();
        boton4 = new javax.swing.JButton();
        boton5 = new javax.swing.JButton();
        boton6 = new javax.swing.JButton();
        boton7 = new javax.swing.JButton();
        boton8 = new javax.swing.JButton();
        boton9 = new javax.swing.JButton();
        boton10 = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        panelVisualizacion = new JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuArchivo = new javax.swing.JMenu();
        menuEjecucion = new javax.swing.JMenu();
        menuAlgoritmos = new javax.swing.JMenu();
        menuConfiguracion = new javax.swing.JMenu();
        menuAyuda = new javax.swing.JMenu();
        vistaVector=new VistaVector();


        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jToolBar1.setRollover(true);

        boton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/util/icon/Boton_Introducir_Datos.png"))); // NOI18N
        boton1.setToolTipText(Sortrace.getIdioma().getProperty("archivoIntroducirDatos"));
        //boton1.setText("Introducir datos");
        boton1.setFocusable(false);
        boton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        boton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        boton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                boton1MouseClicked();
            }
        });
        //jToolBar1.add(boton1);

        boton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/util/icon/Boton_Datos_Aleatorios.png"))); // NOI18N
        boton2.setToolTipText(Sortrace.getIdioma().getProperty("archivoGeneradDatos"));
        //boton2.setText("Generar datos");
        boton2.setFocusable(false);
        boton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        boton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        boton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                boton2MouseClicked(evt);
            }
        });

        //jToolBar1.add(boton2);

        boton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/util/icon/Boton_Cargar_Datos.png"))); // NOI18N
        boton3.setToolTipText(Sortrace.getIdioma().getProperty("archivoCargarDatos"));
        //boton3.setText("Cargar datos");
        boton3.setFocusable(false);
        boton3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        boton3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        boton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                boton3MouseClicked();
            }
        });
        //jToolBar1.add(boton3);

        boton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/util/icon/Boton_Modificar_Datos.png"))); // NOI18N
        boton4.setToolTipText(Sortrace.getIdioma().getProperty("archivoModificarDatos"));
        //boton4.setText("Modificar Datos");
        boton4.setFocusable(false);
        boton4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        boton4.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        boton4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                boton4MouseClicked();
            }
        });
        //jToolBar1.add(boton4);

        boton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/util/icon/Boton_Guardar.png"))); // NOI18N
        boton5.setToolTipText(Sortrace.getIdioma().getProperty("archivoAlmacenarFicheros"));
        //boton5.setText("Almacenar ficheros");
        boton5.setFocusable(false);
        boton5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        boton5.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        boton5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                try {
                    boton5MouseClicked();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        });
        //jToolBar1.add(boton5);

        boton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/util/icon/Boton_Exportar_Imagen.png"))); // NOI18N
        boton6.setToolTipText(Sortrace.getIdioma().getProperty("archivoExportarImagen"));
        //boton6.setText("Exportar imagen");
        boton6.setFocusable(false);
        boton6.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        boton6.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        boton6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                try {
                    boton6MouseClicked();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        });
        //jToolBar1.add(boton6);

        boton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/util/icon/Boton_Exportar_Secuencia_Imagen.png"))); // NOI18N
        boton7.setToolTipText(Sortrace.getIdioma().getProperty("archivoExportarSecuencia"));
        //boton7.setText("Exportar Secuencia");
        boton7.setFocusable(false);
        boton7.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        boton7.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        boton7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                try {
                    boton7MouseClicked();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        });
        //jToolBar1.add(boton7);

        boton8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/util/icon/Boton_Exportar_Animacion.png"))); // NOI18N
        boton8.setToolTipText(Sortrace.getIdioma().getProperty("archivoExportarAnimacion"));
        //boton8.setText("Exportar animacion");
        boton8.setFocusable(false);
        boton8.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        boton8.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        boton8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                boton8MouseClicked();
            }
        });
        //jToolBar1.add(boton8);

        boton9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/util/icon/Boton_Salir.png"))); // NOI18N
        boton9.setToolTipText(Sortrace.getIdioma().getProperty("archivoSalir"));
        //boton9.setText("Salir");
        boton9.setFocusable(false);
        boton9.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        boton9.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        boton9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                boton9MouseClicked();
            }
        });
        //jToolBar1.add(boton9);

        boton10.setFocusable(false);
        boton10.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        boton10.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        boton10.setVisible(false);
        boton10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                boton10MouseClicked(evt);
            }
        });

        //jToolBar1.add(boton10);

        jToolBar1.setBorderPainted(false);

        Dimension d=new Dimension(65,57);
        boton1.setMinimumSize(d);
        boton2.setMinimumSize(d);
        boton3.setMinimumSize(d);
        boton4.setMinimumSize(d);
        boton5.setMinimumSize(d);
        boton6.setMinimumSize(d);
        boton7.setMinimumSize(d);
        boton8.setMinimumSize(d);
        boton9.setMinimumSize(d);
        boton1.setMaximumSize(d);
        boton2.setMaximumSize(d);
        boton3.setMaximumSize(d);
        boton4.setMaximumSize(d);
        boton5.setMaximumSize(d);
        boton6.setMaximumSize(d);
        boton7.setMaximumSize(d);
        boton8.setMaximumSize(d);
        boton9.setMaximumSize(d);
        boton1.setPreferredSize(d);
        boton2.setPreferredSize(d);
        boton3.setPreferredSize(d);
        boton4.setPreferredSize(d);
        boton5.setPreferredSize(d);
        boton6.setPreferredSize(d);
        boton7.setPreferredSize(d);
        boton8.setPreferredSize(d);
        boton9.setPreferredSize(d);

        jToolBar1.add(boton1);
        jToolBar1.add(boton2);
        jToolBar1.add(boton3);
        jToolBar1.add(boton4);
        jToolBar1.add(boton5);
        jToolBar1.add(boton6);
        jToolBar1.add(boton7);
        jToolBar1.add(boton8);
        jToolBar1.add(boton9);
        jToolBar1.add(boton10);

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.setFont(new java.awt.Font("Times New Roman", Font.PLAIN, 14)); // NOI18N

        /*jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setText("TIPO DE ALGORITMO\n\n\n\nDescripcion del algoritmo");
        jScrollPane1.setViewportView(jTextArea1);*/

        jScrollPane1.setViewportView(panelTexto);



        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 290, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 543, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab(Sortrace.getIdioma().getProperty("teoriaPaginaTeoria"), jPanel1);

        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        /*jTextArea2.setEditable(false);
        jTextArea2.setColumns(20);
        jTextArea2.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jTextArea2.setLineWrap(true);
        jTextArea2.setRows(5);
        jTextArea2.setText("CODIGO DEL ALGORITMO    \n\n\n\nCodigo del algoritmo");*/
        jScrollPane2.setViewportView(panelTexto2);

        panelVisualizacion.setBorder(BorderFactory.createTitledBorder("selecion"));
        panelVisualizacion.setLayout(new BoxLayout(this.panelVisualizacion, BoxLayout.Y_AXIS));
        panelVisualizacion.add(this.vistaVector);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 290, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 543, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab(Sortrace.getIdioma().getProperty("teoriaPaginaCodigo"), jPanel2);
        jLayeredPane1.setBorder(new javax.swing.border.MatteBorder(null));

        jTextArea3.setEditable(false);
        jTextArea3.setColumns(20);
        jTextArea3.setFont(new java.awt.Font("Times New Roman", Font.PLAIN, 14)); // NOI18N
        jTextArea3.setLineWrap(true);
        jTextArea3.setRows(5);
        jScrollPane3.setViewportView(jTextArea3);

        jLayeredPane1.setLayer(jScrollPane3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 999, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3)
        );

        jMenuBar1.setFocusable(false);
        jMenuBar1.setRequestFocusEnabled(false);

        menuArchivo.setText(Sortrace.getIdioma().getProperty("menuArchivo"));
        menuArchivo.setFocusable(false);
        menuArchivo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuArchivoMouseClicked();
            }
        });
        jMenuBar1.add(menuArchivo);
        menuArchivo.getAccessibleContext().setAccessibleDescription("");

        menuEjecucion.setText(Sortrace.getIdioma().getProperty("menuEjecucion"));
        menuEjecucion.setFocusable(false);
        menuEjecucion.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuEjecucionMouseClicked();
            }
        });
        jMenuBar1.add(menuEjecucion);

        menuAlgoritmos.setText(Sortrace.getIdioma().getProperty("menuAlgoritmo"));
        menuAlgoritmos.setFocusable(false);
        menuAlgoritmos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuAlgoritmosMouseClicked();
            }
        });
        jMenuBar1.add(menuAlgoritmos);

        menuConfiguracion.setText(Sortrace.getIdioma().getProperty("menuConfiguracion"));
        menuConfiguracion.setFocusable(false);
        menuConfiguracion.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuConfiguracionMouseClicked(evt);
            }
        });
        jMenuBar1.add(menuConfiguracion);

        menuAyuda.setText(Sortrace.getIdioma().getProperty("menuAyuda"));
        menuAyuda.setFocusable(false);
        menuAyuda.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuAyudaMouseClicked();
            }
        });
        jMenuBar1.add(menuAyuda);

        setJMenuBar(jMenuBar1);
        jPanelVistaVector= new JPanel();
        Dimension dimension=new Dimension((int)Toolkit.getDefaultToolkit().getScreenSize().getWidth()-500,500);
        jPanelVistaVector.setSize(dimension);
        jPanelVistaVector.add(vistaVector);
        jPanelVistaVector.setVisible(true);
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                /*.addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)*/
                .addComponent(vistaVector, javax.swing.GroupLayout.PREFERRED_SIZE,(int)Toolkit.getDefaultToolkit().getScreenSize().getWidth()-500, javax.swing.GroupLayout.PREFERRED_SIZE))

        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jTabbedPane1))
                    /*.addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLayeredPane1))*/
                    .addGroup(layout.createSequentialGroup()
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(vistaVector)))
                .addContainerGap())
        );
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setBounds(100, 100, (int) dim.getWidth(), (int) dim.getHeight());
        this.setLocationRelativeTo(null);
        jTabbedPane1.getAccessibleContext().setAccessibleName("tabTeoria");
        dimPred=boton1.getMaximumSize();
        boton1.setSize(boton7.getSize());
        boton2.setSize(boton7.getSize());
        boton3.setSize(boton7.getSize());
        boton4.setSize(boton7.getSize());
        boton5.setSize(boton7.getSize());
        boton6.setSize(boton7.getSize());
        boton8.setSize(boton7.getSize());
        boton9.setSize(boton7.getSize());
        boton5.setMaximumSize(boton7.getMaximumSize());
        boton4.setEnabled(false);
        boton5.setEnabled(false);
        boton6.setEnabled(false);
        boton7.setEnabled(false);
        boton8.setEnabled(false);
        this.actualizarModo();
        this.setTitle("Sortrace");
        ImageIcon icono=new ImageIcon(getClass().getResource("/util/icon/IconoApp.PNG"));
        this.setIconImage(icono.getImage());
        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void mostrarPanelVisualizacion() {
        if (!Sortrace.getVector().isEmpty()) {
            this.vistaVector.actualizarVector();
        }

    }

    private void menuEjecucionMouseClicked() {//GEN-FIRST:event_menuEjecucionMouseClicked
        jTabbedPane1.enable();
        boton1.setMaximumSize(dimPred);
        boton2.setMaximumSize(dimPred);
        boton3.setMaximumSize(dimPred);
        boton4.setMaximumSize(dimPred);
        boton5.setMaximumSize(dimPred);
        jMenuBar1.setEnabled(false);
        boton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/util/icon/Boton_Pausa.png")));
        boton1.setToolTipText(Sortrace.getIdioma().getProperty("ejecucionPausa"));
        boton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/util/icon/Boton_Retroceder_Comienzo.png")));
        boton2.setToolTipText(Sortrace.getIdioma().getProperty("ejecucionRetrocederComienzo"));
        boton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/util/icon/Boton_Retroceder_Iteracion.png")));
        boton3.setToolTipText(Sortrace.getIdioma().getProperty("ejecucionRetrocederIteracion"));
        boton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/util/icon/Boton_Retroceder_Paso.png")));
        boton4.setToolTipText(Sortrace.getIdioma().getProperty("ejecucionRetrocederPaso"));
        boton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/util/icon/Boton_Retroceder_Continuo.png")));
        boton5.setToolTipText(Sortrace.getIdioma().getProperty("ejecucionRetrocederContinuo"));
        boton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/util/icon/Boton_Avanzar_Continuo.png")));
        boton6.setToolTipText(Sortrace.getIdioma().getProperty("ejecucionAvanzarContinuo"));
        boton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/util/icon/Boton_Avanzar_Paso.png")));
        boton7.setToolTipText(Sortrace.getIdioma().getProperty("ejecucionAvanzarPaso"));
        boton8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/util/icon/Boton_Avanzar_Iteracion.png")));
        boton8.setToolTipText(Sortrace.getIdioma().getProperty("ejecucionAvanzarIteracion"));
        boton9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/util/icon/Boton_Avanzar_Final.png")));
        boton9.setToolTipText(Sortrace.getIdioma().getProperty("ejecucionAvanzarFinal"));
        boton10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/util/icon/Boton_Abandonar_Ejecucion.png")));
        boton10.setToolTipText(Sortrace.getIdioma().getProperty("ejecucionAbandonarEjecucion"));
        boton1.setText(null);
        boton2.setText(null);
        boton3.setText(null);
        boton4.setText(null);
        boton5.setText(null);
        boton6.setText(null);
        boton7.setText(null);
        boton8.setText(null);
        boton9.setText(null);
        boton10.setText(null);
        if(!boton2.isVisible()){
            boton2.setVisible(true);
        }
        if(!boton3.isVisible()){
            boton3.setVisible(true);
        }
        if(!boton4.isVisible()){
            boton4.setVisible(true);
        }
        if(!boton5.isVisible()){
            boton5.setVisible(true);
        }
        if(!boton6.isVisible()){
            boton6.setVisible(true);
        }
        if(!boton7.isVisible()){
            boton7.setVisible(true);
        }
        if(!boton8.isVisible()){
            boton8.setVisible(true);
        }
        if(!boton9.isVisible()){
            boton9.setVisible(true);
        }
        if(!boton10.isVisible()){
            boton10.setVisible(true);
        }
        if(Sortrace.getAlgoritmo()!=null) {
            if (Sortrace.getAlgoritmo().getContinuo()) {
                boton1.setEnabled(true);
                boton2.setEnabled(false);
                boton3.setEnabled(false);
                boton4.setEnabled(false);
                boton5.setEnabled(false);
                boton6.setEnabled(false);
                boton7.setEnabled(false);
                boton8.setEnabled(false);
                boton9.setEnabled(false);
                boton10.setEnabled(true);
            } else {
                boton1.setEnabled(false);
                boton2.setEnabled(true);
                boton3.setEnabled(true);
                boton4.setEnabled(true);
                boton5.setEnabled(true);
                boton6.setEnabled(true);
                boton7.setEnabled(true);
                boton8.setEnabled(true);
                boton9.setEnabled(true);
                boton10.setEnabled(true);
            }
        }
        actualizarBotonesEjecucion();
    }//GEN-LAST:event_menuEjecucionMouseClicked

    private void menuArchivoMouseClicked() {//GEN-FIRST:event_menuArchivoMouseClicked
        jTabbedPane1.enable();
        boton1.setMaximumSize(dimPred);
        boton2.setMaximumSize(dimPred);
        boton3.setMaximumSize(dimPred);
        boton4.setMaximumSize(dimPred);
        boton5.setMaximumSize(dimPred);
        jMenuBar1.setEnabled(false);
        boton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/util/icon/Boton_Introducir_Datos.png"))); // NOI18N
        boton1.setToolTipText(Sortrace.getIdioma().getProperty("archivoIntroducirDatos"));
        boton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/util/icon/Boton_Datos_Aleatorios.png"))); // NOI18N
        boton2.setToolTipText(Sortrace.getIdioma().getProperty("archivoGeneradDatos"));
        boton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/util/icon/Boton_Cargar_Datos.png"))); // NOI18N
        boton3.setToolTipText(Sortrace.getIdioma().getProperty("archivoCargarDatos"));
        boton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/util/icon/Boton_Modificar_Datos.png"))); // NOI18N
        boton4.setToolTipText(Sortrace.getIdioma().getProperty("archivoModificarDatos"));
        boton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/util/icon/Boton_Guardar.png"))); // NOI18N
        boton5.setToolTipText(Sortrace.getIdioma().getProperty("archivoAlmacenarFicheros"));
        boton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/util/icon/Boton_Exportar_Imagen.png"))); // NOI18N
        boton6.setToolTipText(Sortrace.getIdioma().getProperty("archivoExportarImagen"));
        boton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/util/icon/Boton_Exportar_Secuencia_Imagen.png"))); // NOI18N
        boton7.setToolTipText(Sortrace.getIdioma().getProperty("archivoExportarSecuencia"));
        boton8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/util/icon/Boton_Exportar_Animacion.png"))); // NOI18N
        boton8.setToolTipText(Sortrace.getIdioma().getProperty("archivoExportarAnimacion"));
        boton9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/util/icon/Boton_Salir.png"))); // NOI18N
        boton9.setToolTipText(Sortrace.getIdioma().getProperty("archivoSalir"));
        boton1.setText(null);
        boton2.setText(null);
        boton3.setText(null);
        boton4.setText(null);
        boton5.setText(null);
        boton6.setText(null);
        boton7.setText(null);
        boton8.setText(null);
        boton9.setText(null);
        boton10.setText(null);

        actualizarBotonesArchivo();
        if(!boton1.isVisible()){
            boton1.setVisible(true);
        }
        if(!boton2.isVisible()){
            boton2.setVisible(true);
        }
        if(!boton3.isVisible()){
            boton3.setVisible(true);
        }
        if(!boton4.isVisible()){
            boton4.setVisible(true);
        }
        if(!boton5.isVisible()){
            boton5.setVisible(true);
        }
        if(!boton6.isVisible()){
            boton6.setVisible(true);
        }
        if(!boton7.isVisible()){
            boton7.setVisible(true);
        }
        if(!boton8.isVisible()){
            boton8.setVisible(true);
        }
        if(!boton9.isVisible()){
            boton9.setVisible(true);
        }
        if(boton10.isVisible()){
            boton10.setVisible(false);
        }
    }//GEN-LAST:event_menuArchivoMouseClicked

    private void menuAlgoritmosMouseClicked() {//GEN-FIRST:event_menuAlgoritmosMouseClicked
        jTabbedPane1.enable();
        jMenuBar1.setEnabled(false);
        boton1.setIcon(null);
        boton1.setText(Sortrace.getIdioma().getProperty("algoritmosTextoSeleccion"));
        boton1.setToolTipText(Sortrace.getIdioma().getProperty("algortimosToolSeleccion"));
        boton2.setIcon(null);
        boton2.setText(Sortrace.getIdioma().getProperty("algoritmosTextoInsercion"));
        boton2.setToolTipText(Sortrace.getIdioma().getProperty("algortimosToolInsercion"));
        boton3.setIcon(null);
        boton3.setText(Sortrace.getIdioma().getProperty("algoritmosTextoBurbujaBasica"));
        boton3.setToolTipText(Sortrace.getIdioma().getProperty("algortimosToolBurbujaBasica"));
        boton4.setIcon(null);
        boton4.setText(Sortrace.getIdioma().getProperty("algoritmosTextoBurbujaAvanzada"));
        boton4.setToolTipText(Sortrace.getIdioma().getProperty("algortimosToolBurbujaAvanzada"));
        boton5.setIcon(null);
        boton5.setText(Sortrace.getIdioma().getProperty("algoritmosTextoShell"));
        boton5.setToolTipText(Sortrace.getIdioma().getProperty("algortimosToolShell"));
        boton1.setMaximumSize(new Dimension(250,300));
        boton2.setMaximumSize(new Dimension(250,300));
        boton3.setMaximumSize(new Dimension(250,300));
        boton4.setMaximumSize(new Dimension(250,300));
        boton5.setMaximumSize(new Dimension(250,300));

        boton1.setEnabled(true);
        boton2.setEnabled(true);
        boton3.setEnabled(true);
        boton4.setEnabled(true);
        boton5.setEnabled(true);
        boton6.setEnabled(true);
        boton7.setEnabled(true);
        boton8.setEnabled(true);
        boton9.setEnabled(true);
        boton10.setEnabled(true);

        if(!boton1.isVisible()){
            boton1.setVisible(true);
        }
        if(!boton2.isVisible()){
            boton2.setVisible(true);
        }
        if(!boton3.isVisible()){
            boton3.setVisible(true);
        }
        if(!boton4.isVisible()){
            boton4.setVisible(true);
        }
        if(!boton5.isVisible()){
            boton5.setVisible(true);
        }
        if(boton6.isVisible()){
            boton6.setVisible(false);
        }
        if(boton7.isVisible()){
            boton7.setVisible(false);
        }
        if(boton8.isVisible()){
            boton8.setVisible(false);
        }
        if(boton9.isVisible()){
            boton9.setVisible(false);
        }
        if(boton10.isVisible()){
            boton10.setVisible(false);
        }
    }//GEN-LAST:event_menuAlgoritmosMouseClicked



    private void menuConfiguracionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuConfiguracionMouseClicked
        jTabbedPane1.enable();
        jMenuBar1.setEnabled(false);
        boton1.setMaximumSize(dimPred);
        boton2.setMaximumSize(dimPred);
        boton3.setMaximumSize(dimPred);
        boton4.setMaximumSize(dimPred);
        boton5.setMaximumSize(dimPred);
        boton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/util/icon/Visualizacion.png"))); // NOI18N
        boton1.setToolTipText(Sortrace.getIdioma().getProperty("configuracionVisualizacion"));
        boton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/util/icon/Idioma.png"))); // NOI18N
        boton2.setToolTipText(Sortrace.getIdioma().getProperty("configuracionIdioma"));
        boton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/util/icon/AjustesAnimacion.png"))); // NOI18N
        boton3.setToolTipText(Sortrace.getIdioma().getProperty("configuracionAnimacion"));

        boton1.setEnabled(true);
        boton2.setEnabled(true);
        boton3.setEnabled(true);
        boton4.setEnabled(true);
        boton5.setEnabled(true);
        boton6.setEnabled(true);
        boton7.setEnabled(true);
        boton8.setEnabled(true);
        boton9.setEnabled(true);
        boton10.setEnabled(true);

        boton1.setText(null);
        boton2.setText(null);
        boton3.setText(null);
        boton4.setText(null);
        boton5.setText(null);
        boton6.setText(null);
        boton7.setText(null);
        boton8.setText(null);
        boton9.setText(null);
        boton10.setText(null);
        if(!boton1.isVisible()){
            boton1.setVisible(true);
        }
        if(!boton2.isVisible()){
            boton2.setVisible(true);
        }
        if(!boton3.isVisible()){
            boton3.setVisible(true);
        }
        if(boton4.isVisible()){
            boton4.setVisible(false);
        }
        if(boton5.isVisible()){
            boton5.setVisible(false);
        }
        if(boton6.isVisible()){
            boton6.setVisible(false);
        }
        if(boton7.isVisible()){
            boton7.setVisible(false);
        }
        if(boton8.isVisible()){
            boton8.setVisible(false);
        }
        if(boton9.isVisible()){
            boton9.setVisible(false);
        }
        if(boton10.isVisible()){
            boton10.setVisible(false);
        }
    }//GEN-LAST:event_menuConfiguracionMouseClicked

    private void menuAyudaMouseClicked() {//GEN-FIRST:event_menuAyudaMouseClicked
        jTabbedPane1.enable();
        jMenuBar1.setEnabled(false);
        boton1.setMaximumSize(dimPred);
        boton2.setMaximumSize(dimPred);
        boton3.setMaximumSize(dimPred);
        boton4.setMaximumSize(dimPred);
        boton5.setMaximumSize(dimPred);
        boton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/util/icon/Ayuda.png"))); // NOI18N
        boton1.setToolTipText(Sortrace.getIdioma().getProperty("ayudaSortrace"));
        boton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/util/icon/Informacion.png"))); // NOI18N
        boton2.setToolTipText(Sortrace.getIdioma().getProperty("ayudaSobreSortrace"));

        boton1.setEnabled(true);
        boton2.setEnabled(true);
        boton3.setEnabled(true);
        boton4.setEnabled(true);
        boton5.setEnabled(true);
        boton6.setEnabled(true);
        boton7.setEnabled(true);
        boton8.setEnabled(true);
        boton9.setEnabled(true);
        boton10.setEnabled(true);

        boton1.setText(null);
        boton2.setText(null);
        boton3.setText(null);
        boton4.setText(null);
        boton5.setText(null);
        boton6.setText(null);
        boton7.setText(null);
        boton8.setText(null);
        boton9.setText(null);
        boton10.setText(null);
        if(!boton1.isVisible()){
            boton1.setVisible(true);
        }
        if(!boton2.isVisible()){
            boton2.setVisible(true);
        }
        if(boton3.isVisible()){
            boton3.setVisible(false);
        }
        if(boton4.isVisible()){
            boton4.setVisible(false);
        }
        if(boton5.isVisible()){
            boton5.setVisible(false);
        }
        if(boton6.isVisible()){
            boton6.setVisible(false);
        }
        if(boton7.isVisible()){
            boton7.setVisible(false);
        }
        if(boton8.isVisible()){
            boton8.setVisible(false);
        }
        if(boton9.isVisible()){
            boton9.setVisible(false);
        }
        if(boton10.isVisible()){
            boton10.setVisible(false);
        }
    }//GEN-LAST:event_menuAyudaMouseClicked

    private void boton1MouseClicked() {//GEN-FIRST:event_boton1MouseClicked
        // TODO add your handling code here:
        //aqui
        if(boton1.getToolTipText().equals(Sortrace.getIdioma().getProperty("archivoIntroducirDatos"))){
            intNum =new IntroducirNumeros_IU(false);
        }else if(boton1.getToolTipText().equals(Sortrace.getIdioma().getProperty("algortimosToolSeleccion"))){
            //panelTexto.removeAll();
            panelTexto = new JTextPane();
            panelTexto2 = new JTextPane();

            jScrollPane1.setViewportView(panelTexto);
            jScrollPane2.setViewportView(panelTexto2);

            TeoriaAlgoritmo teoriaAlgoritmo=new TeoriaAlgoritmo("seleccion");

            String[] texto=teoriaAlgoritmo.getTexto();
            String[] textoCodigo=teoriaAlgoritmo.getTextoCodigo();
            ImageIcon[] imagenes=teoriaAlgoritmo.getIcons();

            SimpleAttributeSet attrs = new SimpleAttributeSet();
            SimpleAttributeSet attrs2 = new SimpleAttributeSet();
            SimpleAttributeSet attrs3 = new SimpleAttributeSet();
            StyleConstants.setFontFamily(attrs3,"alegreya sans");
            StyleConstants.setFontSize(attrs3,14);
            StyleConstants.setBold(attrs2, true);
            StyleConstants.setAlignment(attrs2,StyleConstants.ALIGN_CENTER);
            StyleConstants.setFontFamily(attrs2,"alegreya sans");
            StyleConstants.setFontSize(attrs2,18);
            try {
                panelTexto.getStyledDocument().insertString(
                        panelTexto.getStyledDocument().getLength(), Sortrace.getIdioma().getProperty("algortimosToolSeleccion")+"\n\n", attrs2);
                panelTexto2.getStyledDocument().insertString(
                        panelTexto2.getStyledDocument().getLength(), Sortrace.getIdioma().getProperty("algortimosToolSeleccion")+"\n\n", attrs2);
            } catch (BadLocationException e) {
                e.printStackTrace();
            }
            for(int i=0;i<texto.length;i++){
                try {
                    panelTexto.getStyledDocument().insertString(
                            panelTexto.getStyledDocument().getLength(), texto[i], attrs);
                } catch (BadLocationException e) {
                    e.printStackTrace();
                }
                if(i<imagenes.length) {
                    panelTexto.setCaretPosition(panelTexto.getStyledDocument().getLength());
                    panelTexto.insertIcon(imagenes[i]);

                }
            }
            for (String codigo : textoCodigo) {
                try {
                    panelTexto2.getStyledDocument().insertString(
                            panelTexto2.getStyledDocument().getLength(), codigo, attrs3);
                } catch (BadLocationException e) {
                    e.printStackTrace();
                }
            }
            panelTexto.setCaretPosition(0);
            //panelTexto2.setCaretPosition(0);

            this.imagenes.clear();
            Sortrace.setAlgoritmo(new Seleccion(Sortrace.getVector().getVector()));
            Sortrace.getAlgoritmo().ejecutar();
            vistaVector.actualizarVector();
            this.actualizarModo();
        }else if(boton1.getToolTipText().equals(Sortrace.getIdioma().getProperty("ayudaSortrace"))){
            File fichero;
            try {
                // Carga el fichero de ayuda
                if (!Sortrace.getConfig().getIdioma().equals("ESPAÑOL") && !Sortrace.getConfig().getIdioma().equals("SPANISH")) {
                    fichero = new File("../Sortrace/src/util/help/help_set_en.hs");

                }else{
                    fichero = new File("../Sortrace/src/util/help/help_set.hs");
                }
                URL hsURL = fichero.toURI().toURL();

                // Crea el HelpSet y el HelpBroker
                HelpSet helpset = new HelpSet(getClass().getClassLoader(), hsURL);
                HelpBroker hb = helpset.createHelpBroker();

                // Pone ayuda a item de menu al pulsarlo y a F1 en ventana
                // principal y secundaria.
                hb.setDisplayed(true);
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }else if(boton1.getToolTipText().equals(Sortrace.getIdioma().getProperty("ejecucionPausa"))){
            try {
                Sortrace.getAlgoritmo().pause();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            if((!ayudaCodigo) && (jTabbedPane1.getSelectedIndex()==0)){
                JOptionPane.showMessageDialog(this, Sortrace.getIdioma().getProperty("ayudaCodigoMensaje"), Sortrace.getIdioma().getProperty("ayudaCodigoTitulo"), JOptionPane.INFORMATION_MESSAGE, null);
                ayudaCodigo=true;
            }
            this.mostrarPanelVisualizacion();
            boton1.setEnabled(false);
            boton2.setEnabled(true);
            boton3.setEnabled(true);
            boton4.setEnabled(true);
            boton5.setEnabled(true);
            boton6.setEnabled(true);
            boton7.setEnabled(true);
            boton8.setEnabled(true);
            boton9.setEnabled(true);
            boton10.setEnabled(true);

            actualizarBotonesEjecucion();
        }else if(boton1.getToolTipText().equals(Sortrace.getIdioma().getProperty("configuracionVisualizacion"))){
            new Visualizacion();
        }

    }//GEN-LAST:event_boton1MouseClicked


    private void boton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_boton2MouseClicked
        // TODO add your handling code here:
        if(boton2.getToolTipText().equals(Sortrace.getIdioma().getProperty("archivoGeneradDatos"))){
            new GenerarDatosAleatorios_IU();
        }else if(boton2.getToolTipText().equals(Sortrace.getIdioma().getProperty("algortimosToolInsercion"))){
            //panelTexto.removeAll();
            panelTexto = new JTextPane();
            panelTexto2 = new JTextPane();
            jScrollPane1.setViewportView(panelTexto);
            jScrollPane2.setViewportView(panelTexto2);

            TeoriaAlgoritmo teoriaAlgoritmo=new TeoriaAlgoritmo("insercion");

            String[] texto=teoriaAlgoritmo.getTexto();
            String[] textoCodigo=teoriaAlgoritmo.getTextoCodigo();
            ImageIcon[] imagenes=teoriaAlgoritmo.getIcons();

            SimpleAttributeSet attrs = new SimpleAttributeSet();
            SimpleAttributeSet attrs2 = new SimpleAttributeSet();
            SimpleAttributeSet attrs3 = new SimpleAttributeSet();

            StyleConstants.setFontFamily(attrs3,"alegreya sans");
            StyleConstants.setFontSize(attrs3,14);
            StyleConstants.setBold(attrs2, true);
            StyleConstants.setAlignment(attrs2,StyleConstants.ALIGN_CENTER);
            StyleConstants.setFontFamily(attrs2,"alegreya sans");
            StyleConstants.setFontSize(attrs2,18);
            try {
                panelTexto.getStyledDocument().insertString(
                        panelTexto.getStyledDocument().getLength(), Sortrace.getIdioma().getProperty("algortimosToolInsercion")+"\n\n", attrs2);
                panelTexto2.getStyledDocument().insertString(
                        panelTexto2.getStyledDocument().getLength(), Sortrace.getIdioma().getProperty("algortimosToolInsercion")+"\n\n", attrs2);
            } catch (BadLocationException e) {
                e.printStackTrace();
            }
            for(int i=0;i<texto.length;i++){
                try {
                    panelTexto.getStyledDocument().insertString(
                            panelTexto.getStyledDocument().getLength(), texto[i], attrs);
                } catch (BadLocationException e) {
                    e.printStackTrace();
                }
                if(i<imagenes.length) {
                    panelTexto.setCaretPosition(panelTexto.getStyledDocument().getLength());
                    panelTexto.insertIcon(imagenes[i]);
                }
            }
            for (String codigo : textoCodigo) {
                try {
                    panelTexto2.getStyledDocument().insertString(
                            panelTexto2.getStyledDocument().getLength(), codigo, attrs3);
                } catch (BadLocationException e) {
                    e.printStackTrace();
                }
            }
            panelTexto.setCaretPosition(0);
            panelTexto2.setCaretPosition(0);

            this.imagenes.clear();
            Sortrace.setAlgoritmo(new Insercion(Sortrace.getVector().getVector()));
            Sortrace.getAlgoritmo().ejecutar();
            vistaVector.actualizarVector();
            this.actualizarModo();
        }else if(boton2.getToolTipText().equals(Sortrace.getIdioma().getProperty("ejecucionRetrocederComienzo"))){
            if((!ayudaCodigo) && (jTabbedPane1.getSelectedIndex()==0)){
                JOptionPane.showMessageDialog(this, Sortrace.getIdioma().getProperty("ayudaCodigoMensaje"), Sortrace.getIdioma().getProperty("ayudaCodigoTitulo"), JOptionPane.INFORMATION_MESSAGE, null);
                ayudaCodigo=true;
            }
            Sortrace.getAlgoritmo().retrocederComienzo();
            this.mostrarPanelVisualizacion();
            this.añadirFotoSecuencia();
            boton1.setEnabled(false);
            boton2.setEnabled(true);
            boton3.setEnabled(true);
            boton4.setEnabled(true);
            boton5.setEnabled(true);
            boton6.setEnabled(true);
            boton7.setEnabled(true);
            boton8.setEnabled(true);
            boton9.setEnabled(true);
            boton10.setEnabled(true);
            actualizarBotonesEjecucion();
        }else if(boton2.getToolTipText().equals(Sortrace.getIdioma().getProperty("configuracionIdioma"))){
            String[] idiomas = new String[]{Sortrace.getIdioma().getProperty("idiomaEspanol"), Sortrace.getIdioma().getProperty("idiomaIngles")};
            //TextoDialogos.setTextoBotonesAceptarCancelar(language);
            String idiomaSeleccionado = (String)JOptionPane.showInputDialog(this, Sortrace.getIdioma().getProperty("idiomaSeleccionMensaje"), Sortrace.getIdioma().getProperty("idiomaSeleccionTitulo"), JOptionPane.QUESTION_MESSAGE, null, idiomas,0);
            if (idiomaSeleccionado != null && cambioIdioma(idiomaSeleccionado)) {
                String[] opcionesConfirmacion = new String[]{Sortrace.getIdioma().getProperty("generarDatosBotonAceptar"), Sortrace.getIdioma().getProperty("generarDatosBotonCancelar")};
                int confirmacion = JOptionPane.showOptionDialog(this, Sortrace.getIdioma().getProperty("idiomaCambioMensaje"), Sortrace.getIdioma().getProperty("idiomaCambioTitulo"), JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, opcionesConfirmacion, opcionesConfirmacion[0]);
                Sortrace.getConfig().setIdioma(idiomaSeleccionado);
                if (confirmacion == 0) {
                    Sortrace.actualizarIdioma();
                    actualizarPantalla(evt);
                    Sortrace.getConfig().setIdioma(idiomaSeleccionado);
                    UIManager.put("FileChooser.saveButtonText",Sortrace.getIdioma().getProperty("fileChoserGuardar"));
                    UIManager.put("FileChooser.openButtonText",Sortrace.getIdioma().getProperty("fileChoserAbrir"));
                    UIManager.put("FileChooser.cancelButtonText",Sortrace.getIdioma().getProperty("fileChoserCancelar"));
                    UIManager.put("FileChooser.updateButtonText",Sortrace.getIdioma().getProperty("fileChoserActualizar"));
                    UIManager.put("FileChooser.helpButtonText",Sortrace.getIdioma().getProperty("fileChoserAyuda"));
                    UIManager.put("FileChooser.saveButtonToolTipText",Sortrace.getIdioma().getProperty("fileChoserToolTip"));
                    UIManager.put("FileChooser.openDialogTitleText", Sortrace.getIdioma().getProperty("fileChoserDialogAbrir"));
                    UIManager.put("FileChooser.saveDialogTitleText", Sortrace.getIdioma().getProperty("fileChoserDialogGuardar"));
                    UIManager.put("FileChooser.lookInLabelText", Sortrace.getIdioma().getProperty("fileChoserMirarEn"));
                    UIManager.put("FileChooser.saveInLabelText", Sortrace.getIdioma().getProperty("fileChoserGuardarEn"));
                    UIManager.put("FileChooser.openButtonText", Sortrace.getIdioma().getProperty("fileChoserAbrir"));
                    UIManager.put("FileChooser.cancelButtonText", Sortrace.getIdioma().getProperty("fileChoserCancelar"));
                    UIManager.put("FileChooser.fileNameLabelText", Sortrace.getIdioma().getProperty("fileChoserNameLabelText"));
                    UIManager.put("FileChooser.folderNameLabelText", Sortrace.getIdioma().getProperty("fileChoserFolderLabelText"));
                    UIManager.put("FileChooser.filesOfTypeLabelText", Sortrace.getIdioma().getProperty("filesChoserOfTypeLabelText"));
                    UIManager.put("FileChooser.openButtonToolTipText", Sortrace.getIdioma().getProperty("fileChoseropenButtonToolTipText"));
                    UIManager.put("FileChooser.cancelButtonToolTipText",Sortrace.getIdioma().getProperty("fileChosercancelButtonToolTipText"));
                    UIManager.put("FileChooser.fileNameHeaderText",Sortrace.getIdioma().getProperty("fileChoserfileNameHeaderText"));
                    UIManager.put("FileChooser.upFolderToolTipText", Sortrace.getIdioma().getProperty("fileChoserupFolderToolTipText"));
                    UIManager.put("FileChooser.homeFolderToolTipText",Sortrace.getIdioma().getProperty("fileChoserhomeFolderToolTipText"));
                    UIManager.put("FileChooser.newFolderToolTipText",Sortrace.getIdioma().getProperty("fileChosernewFolderToolTipText"));
                    UIManager.put("FileChooser.listViewButtonToolTipText",Sortrace.getIdioma().getProperty("fileChoserlistViewButtonToolTipText"));
                    UIManager.put("FileChooser.newFolderButtonText",Sortrace.getIdioma().getProperty("fileChosernewFolderButtonText"));
                    UIManager.put("FileChooser.renameFileButtonText", Sortrace.getIdioma().getProperty("fileChoserrenameFileButtonText"));
                    UIManager.put("FileChooser.deleteFileButtonText", Sortrace.getIdioma().getProperty("fileChoserdeleteFileButtonText"));
                    UIManager.put("FileChooser.filterLabelText", Sortrace.getIdioma().getProperty("fileChoserfilterLabelText"));
                    UIManager.put("FileChooser.detailsViewButtonToolTipText", Sortrace.getIdioma().getProperty("fileChoserdetailsViewButtonToolTipText"));
                    UIManager.put("FileChooser.fileSizeHeaderText",Sortrace.getIdioma().getProperty("fileChoserfileSizeHeaderText"));
                    UIManager.put("FileChooser.fileDateHeaderText", Sortrace.getIdioma().getProperty("fileChoserfileDateHeaderText"));
                }
            }
        }
    }//GEN-LAST:event_boton2MouseClicked

    private void boton3MouseClicked() {//GEN-FIRST:event_boton3MouseClicked
        // TODO add your handling code here:
        if(boton3.getToolTipText().equals(Sortrace.getIdioma().getProperty("archivoCargarDatos"))) {
            //SwingUtilities.updateComponentTreeUI(this);
            JFileChooser fileSelector = new JFileChooser();
            fileSelector.setFileSelectionMode(0);
            String dir = Sortrace.getConfig().getDirectorioVectores();
            FiltroTxt filtroTxt = new FiltroTxt();
            fileSelector.addChoosableFileFilter(filtroTxt);
            fileSelector.setFileFilter(filtroTxt);
            fileSelector.setAcceptAllFileFilterUsed(false);
            fileSelector.setCurrentDirectory(new File(dir));
            int opcionCarga = fileSelector.showOpenDialog(this);
            File file = fileSelector.getSelectedFile();

            if (file != null && opcionCarga == 0) {
                FileReader fr = null;
                BufferedReader br;
                String nombreFicheroCompleto = file.getAbsolutePath();
                String nombreFichero = file.getName();

                try {
                    if (fileSelector.getFileFilter() == null && !file.getName().toLowerCase().endsWith(".txt")) {
                        JOptionPane.showMessageDialog(this, Sortrace.getIdioma().getProperty("errorExtensionFichero"), Sortrace.getIdioma().getProperty("errorTituloFileNotFound"), JOptionPane.ERROR_MESSAGE, null);
                    } else {
                        String extension = fileSelector.getFileFilter().getDescription();
                        if (!file.getName().toLowerCase().endsWith(extension)) {
                            nombreFicheroCompleto = nombreFicheroCompleto + extension;
                            nombreFichero = nombreFichero + extension;
                        }

                        fr = new FileReader(nombreFicheroCompleto);
                        br = new BufferedReader(fr);
                        String vectorFichero = br.readLine();
                        Sortrace.getVector().cargarDeFichero(vectorFichero);
                        String messageOK = "\"" + nombreFichero + "\" " + "exitoCargar";
                        JOptionPane.showMessageDialog(this, messageOK, "tituloExitoCargar", JOptionPane.INFORMATION_MESSAGE, null);
                    }
                } catch (FileNotFoundException var25) {
                    JOptionPane.showMessageDialog(this, Sortrace.getIdioma().getProperty("errorMensajeFileNotFound"), Sortrace.getIdioma().getProperty("errorTituloFileNotFound"), JOptionPane.ERROR_MESSAGE, null);
                } catch (IOException var26) {
                    JOptionPane.showMessageDialog(this, Sortrace.getIdioma().getProperty("errorMensajeIOException"), Sortrace.getIdioma().getProperty("errorTituloIOException"), JOptionPane.ERROR_MESSAGE, null);
                } catch (NumberFormatException var27) {
                    JOptionPane.showMessageDialog(this, Sortrace.getIdioma().getProperty("errorMensajeNumberFormat"), Sortrace.getIdioma().getProperty("errorTituloNumberFormat"), JOptionPane.ERROR_MESSAGE, null);
                } finally {
                    try {
                        if (fr != null) {
                            fr.close();
                        }
                    } catch (IOException var24) {
                        JOptionPane.showMessageDialog(this, Sortrace.getIdioma().getProperty("errorMensajeIOException"), Sortrace.getIdioma().getProperty("errorTituloIOException"), JOptionPane.ERROR_MESSAGE, null);
                    }

                }
            }
            Sortrace.getConfig().modificarDirectorioVectores(fileSelector.getCurrentDirectory().getAbsolutePath());
            Sortrace.getPantalla().mostrarPanelVisualizacion();
            Sortrace.getPantalla().actualizarBotonesArchivo();
        }else if(boton3.getToolTipText().equals(Sortrace.getIdioma().getProperty("algortimosToolBurbujaBasica"))){
            //panelTexto.removeAll();
            panelTexto = new JTextPane();
            panelTexto2 = new JTextPane();

            jScrollPane1.setViewportView(panelTexto);
            jScrollPane2.setViewportView(panelTexto2);

            TeoriaAlgoritmo teoriaAlgoritmo=new TeoriaAlgoritmo("burbujabasica");

            String[] texto=teoriaAlgoritmo.getTexto();
            String[] textoCodigo=teoriaAlgoritmo.getTextoCodigo();
            ImageIcon[] imagenes=teoriaAlgoritmo.getIcons();

            SimpleAttributeSet attrs = new SimpleAttributeSet();
            SimpleAttributeSet attrs2 = new SimpleAttributeSet();
            SimpleAttributeSet attrs3 = new SimpleAttributeSet();

            StyleConstants.setFontFamily(attrs3,"alegreya sans");
            StyleConstants.setFontSize(attrs3,14);
            StyleConstants.setBold(attrs2, true);
            StyleConstants.setAlignment(attrs2,StyleConstants.ALIGN_CENTER);
            StyleConstants.setFontFamily(attrs2,"alegreya sans");
            StyleConstants.setFontSize(attrs2,18);
            try {
                panelTexto.getStyledDocument().insertString(
                        panelTexto.getStyledDocument().getLength(), Sortrace.getIdioma().getProperty("algortimosToolBurbujaBasica")+"\n\n", attrs2);
                panelTexto2.getStyledDocument().insertString(
                        panelTexto2.getStyledDocument().getLength(), Sortrace.getIdioma().getProperty("algortimosToolBurbujaBasica")+"\n\n", attrs2);
            } catch (BadLocationException e) {
                e.printStackTrace();
            }
            for(int i=0;i<texto.length;i++){
                try {
                    panelTexto.getStyledDocument().insertString(
                            panelTexto.getStyledDocument().getLength(), texto[i], attrs);
                } catch (BadLocationException e) {
                    e.printStackTrace();
                }
                if(i<imagenes.length) {
                    panelTexto.setCaretPosition(panelTexto.getStyledDocument().getLength());
                    panelTexto.insertIcon(imagenes[i]);
                }
            }
            for (String codigo : textoCodigo) {
                try {
                    panelTexto2.getStyledDocument().insertString(
                            panelTexto2.getStyledDocument().getLength(), codigo, attrs3);
                } catch (BadLocationException e) {
                    e.printStackTrace();
                }
            }
            this.imagenes.clear();
            panelTexto.setCaretPosition(0);
            panelTexto2.setCaretPosition(0);
            Sortrace.setAlgoritmo(new BurbujaBasica(Sortrace.getVector().getVector()));
            Sortrace.getAlgoritmo().ejecutar();
            vistaVector.actualizarVector();
            this.actualizarModo();
        }else if(boton3.getToolTipText().equals(Sortrace.getIdioma().getProperty("ejecucionRetrocederIteracion"))){
            if((!ayudaCodigo) && (jTabbedPane1.getSelectedIndex()==0)){
                JOptionPane.showMessageDialog(this, Sortrace.getIdioma().getProperty("ayudaCodigoMensaje"), Sortrace.getIdioma().getProperty("ayudaCodigoTitulo"), JOptionPane.INFORMATION_MESSAGE, null);
                ayudaCodigo=true;
            }
            Sortrace.getAlgoritmo().retrocederIteracion();
            this.mostrarPanelVisualizacion();
            this.añadirFotoSecuencia();
            boton1.setEnabled(false);
            boton2.setEnabled(true);
            boton3.setEnabled(true);
            boton4.setEnabled(true);
            boton5.setEnabled(true);
            boton6.setEnabled(true);
            boton7.setEnabled(true);
            boton8.setEnabled(true);
            boton9.setEnabled(true);
            boton10.setEnabled(true);
            actualizarBotonesEjecucion();
        }else if(boton3.getToolTipText().equals(Sortrace.getIdioma().getProperty("configuracionAnimacion"))) {
            new Animacion();
        }
    }

    private void boton4MouseClicked() {//GEN-FIRST:event_boton4MouseClicked
        // TODO add your handling code here:
        if(boton4.getToolTipText().equals(Sortrace.getIdioma().getProperty("archivoModificarDatos"))){
            intNum =new IntroducirNumeros_IU(true);
        }else if(boton4.getToolTipText().equals(Sortrace.getIdioma().getProperty("algortimosToolBurbujaAvanzada"))){
            //panelTexto.removeAll();
            panelTexto = new JTextPane();
            panelTexto2 = new JTextPane();

            jScrollPane1.setViewportView(panelTexto);
            jScrollPane2.setViewportView(panelTexto2);

            TeoriaAlgoritmo teoriaAlgoritmo=new TeoriaAlgoritmo("burbujaavanzada");

            String[] texto=teoriaAlgoritmo.getTexto();
            String[] textoCodigo=teoriaAlgoritmo.getTextoCodigo();
            ImageIcon[] imagenes=teoriaAlgoritmo.getIcons();

            SimpleAttributeSet attrs = new SimpleAttributeSet();
            SimpleAttributeSet attrs2 = new SimpleAttributeSet();
            SimpleAttributeSet attrs3 = new SimpleAttributeSet();

            StyleConstants.setFontFamily(attrs3,"alegreya sans");
            StyleConstants.setFontSize(attrs3,14);
            StyleConstants.setBold(attrs2, true);
            StyleConstants.setAlignment(attrs2,StyleConstants.ALIGN_CENTER);
            StyleConstants.setFontFamily(attrs2,"alegreya sans");
            StyleConstants.setFontSize(attrs2,18);
            try {
                panelTexto.getStyledDocument().insertString(
                        panelTexto.getStyledDocument().getLength(), Sortrace.getIdioma().getProperty("algortimosToolBurbujaAvanzada")+"\n\n", attrs2);
                panelTexto2.getStyledDocument().insertString(
                        panelTexto2.getStyledDocument().getLength(), Sortrace.getIdioma().getProperty("algortimosToolBurbujaAvanzada")+"\n\n", attrs2);
            } catch (BadLocationException e) {
                e.printStackTrace();
            }
            for(int i=0;i<texto.length;i++){
                try {
                    panelTexto.getStyledDocument().insertString(
                            panelTexto.getStyledDocument().getLength(), texto[i], attrs);
                } catch (BadLocationException e) {
                    e.printStackTrace();
                }
                if(i<imagenes.length) {
                    panelTexto.setCaretPosition(panelTexto.getStyledDocument().getLength());
                    panelTexto.insertIcon(imagenes[i]);
                }
            }
            for (String codigo : textoCodigo) {
                try {
                    panelTexto2.getStyledDocument().insertString(
                            panelTexto2.getStyledDocument().getLength(), codigo, attrs3);
                } catch (BadLocationException e) {
                    e.printStackTrace();
                }
            }
            panelTexto.setCaretPosition(0);
            //panelTexto2.setCaretPosition(0);

            this.imagenes.clear();
            Sortrace.setAlgoritmo(new BurbujaAvanzada(Sortrace.getVector().getVector()));
            Sortrace.getAlgoritmo().ejecutar();
            vistaVector.actualizarVector();
            this.actualizarModo();
        }else if(boton4.getToolTipText().equals(Sortrace.getIdioma().getProperty("ejecucionRetrocederPaso"))){
            if((!ayudaCodigo) && (jTabbedPane1.getSelectedIndex()==0)){
                JOptionPane.showMessageDialog(this, Sortrace.getIdioma().getProperty("ayudaCodigoMensaje"), Sortrace.getIdioma().getProperty("ayudaCodigoTitulo"), JOptionPane.INFORMATION_MESSAGE, null);
                ayudaCodigo=true;
            }
            Sortrace.getAlgoritmo().retrocederPaso();
            this.mostrarPanelVisualizacion();
            this.añadirFotoSecuencia();
            boton1.setEnabled(false);
            boton2.setEnabled(true);
            boton3.setEnabled(true);
            boton4.setEnabled(true);
            boton5.setEnabled(true);
            boton6.setEnabled(true);
            boton7.setEnabled(true);
            boton8.setEnabled(true);
            boton9.setEnabled(true);
            boton10.setEnabled(true);
            actualizarBotonesEjecucion();
        }
    }//GEN-LAST:event_boton4MouseClicked
    private void boton5MouseClicked() throws InterruptedException {//GEN-FIRST:event_boton3MouseClicked
        // TODO add your handling code here:
        if(boton5.getToolTipText().equals(Sortrace.getIdioma().getProperty("archivoAlmacenarFicheros"))) {
            JFileChooser fileSelector = new JFileChooser();
            fileSelector.setFileSelectionMode(0);
            String dir = Sortrace.getConfig().getDirectorioVectores();
            FiltroTxt filtroTxt = new FiltroTxt();
            fileSelector.addChoosableFileFilter(filtroTxt);
            fileSelector.setFileFilter(filtroTxt);
            fileSelector.setAcceptAllFileFilterUsed(false);
            fileSelector.setCurrentDirectory(new File(dir));
            int opcionGuardar = fileSelector.showSaveDialog(this);
            File file = fileSelector.getSelectedFile();

            if (file != null && opcionGuardar == 0) {
                FileWriter fw = null;
                PrintWriter pw;
                String nombreFicheroCompleto = file.getAbsolutePath();
                String nombreFichero = file.getName();

                try {
                    if (fileSelector.getFileFilter() == null && !file.getName().toLowerCase().endsWith(".txt")) {
                        JOptionPane.showMessageDialog(this, Sortrace.getIdioma().getProperty("errorExtensionFichero"), Sortrace.getIdioma().getProperty("errorTituloFileNotFound"), JOptionPane.ERROR_MESSAGE, null);
                    } else {
                        String extension = fileSelector.getFileFilter().getDescription();
                        if (!file.getName().toLowerCase().endsWith(extension)) {
                            nombreFicheroCompleto = nombreFicheroCompleto + extension;
                            nombreFichero = nombreFichero + extension;
                        }

                        if (!file.exists() || this.sobrescribirArchivo()) {
                            fw = new FileWriter(nombreFicheroCompleto);
                            pw = new PrintWriter(fw);
                            Vector vector = Sortrace.getVector();
                            vector.escribirEnFichero(pw);
                            String messageOK = "\"" + nombreFichero + "\" " + "exitoGuardar";
                            JOptionPane.showMessageDialog(this, messageOK, "tituloExitoGuardar", JOptionPane.INFORMATION_MESSAGE, null);
                        }
                    }
                } catch (FileNotFoundException var23) {
                    JOptionPane.showMessageDialog(this, Sortrace.getIdioma().getProperty("errorMensajeGuardarFileNotFound"), Sortrace.getIdioma().getProperty("errorTituloGuardarFileNotFound"), JOptionPane.ERROR_MESSAGE, null);
                } catch (IOException var24) {
                    JOptionPane.showMessageDialog(this, Sortrace.getIdioma().getProperty("errorMensajeIOExceptionGuardar"), Sortrace.getIdioma().getProperty("errorTituloIOExceptionGuardar"), JOptionPane.ERROR_MESSAGE, null);
                } finally {
                    try {
                        if (fw != null) {
                            fw.close();
                        }
                    } catch (IOException var22) {
                        JOptionPane.showMessageDialog(this, Sortrace.getIdioma().getProperty("errorMensajeIOExceptionGuardar"), Sortrace.getIdioma().getProperty("errorTituloIOExceptionGuardar"), JOptionPane.ERROR_MESSAGE, null);
                    }

                }
            }
            Sortrace.getConfig().modificarDirectorioVectores(fileSelector.getCurrentDirectory().getAbsolutePath());
        }else if(boton5.getToolTipText().equals(Sortrace.getIdioma().getProperty("algortimosToolShell"))){
            //panelTexto.removeAll();
            panelTexto = new JTextPane();
            panelTexto2 = new JTextPane();

            jScrollPane1.setViewportView(panelTexto);
            jScrollPane2.setViewportView(panelTexto2);

            TeoriaAlgoritmo teoriaAlgoritmo=new TeoriaAlgoritmo("shell");
            String[] texto=teoriaAlgoritmo.getTexto();
            String[] textoCodigo=teoriaAlgoritmo.getTextoCodigo();
            ImageIcon[] imagenes=teoriaAlgoritmo.getIcons();

            SimpleAttributeSet attrs = new SimpleAttributeSet();
            SimpleAttributeSet attrs2 = new SimpleAttributeSet();
            SimpleAttributeSet attrs3 = new SimpleAttributeSet();

            StyleConstants.setFontFamily(attrs3,"alegreya sans");
            StyleConstants.setFontSize(attrs3,14);
            StyleConstants.setBold(attrs2, true);
            StyleConstants.setAlignment(attrs2,StyleConstants.ALIGN_CENTER);
            StyleConstants.setFontFamily(attrs2,"alegreya sans");
            StyleConstants.setFontSize(attrs2,18);
            try {
                panelTexto.getStyledDocument().insertString(
                        panelTexto.getStyledDocument().getLength(), Sortrace.getIdioma().getProperty("algortimosToolShell")+"\n\n", attrs2);
                panelTexto2.getStyledDocument().insertString(
                        panelTexto2.getStyledDocument().getLength(), Sortrace.getIdioma().getProperty("algortimosToolShell")+"\n\n", attrs2);
            } catch (BadLocationException e) {
                e.printStackTrace();
            }
            for(int i=0;i<texto.length;i++){
                try {
                    panelTexto.getStyledDocument().insertString(
                            panelTexto.getStyledDocument().getLength(), texto[i], attrs);
                } catch (BadLocationException e) {
                    e.printStackTrace();
                }
                if(i<imagenes.length) {
                    panelTexto.setCaretPosition(panelTexto.getStyledDocument().getLength());
                    panelTexto.insertIcon(imagenes[i]);
                }
            }
            for (String codigo : textoCodigo) {
                try {
                    panelTexto2.getStyledDocument().insertString(
                            panelTexto2.getStyledDocument().getLength(), codigo, attrs3);
                } catch (BadLocationException e) {
                    e.printStackTrace();
                }
            }

            this.imagenes.clear();

            panelTexto.setCaretPosition(0);
            panelTexto2.setCaretPosition(0);

            Sortrace.setAlgoritmo(new Shell(Sortrace.getVector().getVector()));
            Sortrace.getAlgoritmo().ejecutar();
            vistaVector.actualizarVector();
            this.actualizarModo();
        }else if(boton5.getToolTipText().equals(Sortrace.getIdioma().getProperty("ejecucionRetrocederContinuo"))) {
            if((!ayudaCodigo) && (jTabbedPane1.getSelectedIndex()==0)){
                JOptionPane.showMessageDialog(this, Sortrace.getIdioma().getProperty("ayudaCodigoMensaje"), Sortrace.getIdioma().getProperty("ayudaCodigoTitulo"), JOptionPane.INFORMATION_MESSAGE, null);
                ayudaCodigo=true;
            }
            Sortrace.getAlgoritmo().retrocederContinuo();
            this.mostrarPanelVisualizacion();
            boton1.setEnabled(true);
            boton2.setEnabled(false);
            boton3.setEnabled(false);
            boton4.setEnabled(false);
            boton5.setEnabled(false);
            boton6.setEnabled(false);
            boton7.setEnabled(false);
            boton8.setEnabled(false);
            boton9.setEnabled(false);
            boton10.setEnabled(true);
            //actualizarBotonesEjecucion();
        }
    }
    private void boton6MouseClicked() throws InterruptedException {//GEN-FIRST:event_boton4MouseClicked
        // TODO add your handling code here:
        if(boton6.getToolTipText().equals(Sortrace.getIdioma().getProperty("ejecucionAvanzarContinuo"))) {
            if((!ayudaCodigo) && (jTabbedPane1.getSelectedIndex()==0)){
                JOptionPane.showMessageDialog(this, Sortrace.getIdioma().getProperty("ayudaCodigoMensaje"), Sortrace.getIdioma().getProperty("ayudaCodigoTitulo"), JOptionPane.INFORMATION_MESSAGE, null);
                ayudaCodigo=true;
            }
            Sortrace.getAlgoritmo().avanzarContinuo();
            //this.mostrarPanelVisualizacion();
            boton1.setEnabled(true);
            boton2.setEnabled(false);
            boton3.setEnabled(false);
            boton4.setEnabled(false);
            boton5.setEnabled(false);
            boton6.setEnabled(false);
            boton7.setEnabled(false);
            boton8.setEnabled(false);
            boton9.setEnabled(false);
            boton10.setEnabled(true);

        }else if(boton6.getToolTipText().equals(Sortrace.getIdioma().getProperty("archivoExportarImagen"))){
            JFileChooser panelFileSelector = new JFileChooser();
            FileNameExtensionFilter filtroPNG = new FileNameExtensionFilter(".png", "png");
            FileNameExtensionFilter filtroJPG = new FileNameExtensionFilter(".jpg", "jpg");
            panelFileSelector.addChoosableFileFilter(filtroPNG);
            panelFileSelector.addChoosableFileFilter(filtroJPG);
            panelFileSelector.setFileFilter(filtroJPG);
            panelFileSelector.setAcceptAllFileFilterUsed(false);
            String dir = Sortrace.getConfig().getDirectorioImagenes();
            if (dir != null) {
                panelFileSelector.setCurrentDirectory(new File(dir));
            }

            int aceptarExportarImagen = panelFileSelector.showSaveDialog(this);
            if (aceptarExportarImagen == 0) {
                File file = panelFileSelector.getSelectedFile().getAbsoluteFile();
                String nombreFichero = file.getName();
                String nombreFicheroCompleto = file.getAbsolutePath();

                try {
                    if (panelFileSelector.getFileFilter() == null && !file.getName().toLowerCase().endsWith(".jpg") && !file.getName().toLowerCase().endsWith(".png")) {
                        JOptionPane.showMessageDialog(this, Sortrace.getIdioma().getProperty("errorExtensionFichero"), Sortrace.getIdioma().getProperty("tituloErrorExtensionImagen"), JOptionPane.ERROR_MESSAGE, null);
                    } else {
                        String extension;
                        if (panelFileSelector.getFileFilter() != null) {
                            extension = panelFileSelector.getFileFilter().getDescription();
                            if (!file.getName().toLowerCase().endsWith(extension)) {
                                nombreFicheroCompleto = nombreFicheroCompleto + extension;
                                nombreFichero = nombreFichero + extension;
                            }
                        } else if (file.getName().toLowerCase().endsWith(".jpg")) {
                            extension = ".jpg";
                        } else {
                            extension = ".png";
                        }

                        if (!file.exists() || this.sobrescribirArchivo()) {
                            if (extension.equals(".jpg")) {
                                BufferedImage imagen = new BufferedImage(vistaVector.getWidth()*2/3, vistaVector.getHeight(), 1);
                                Graphics g = imagen.getGraphics();
                                vistaVector.paint(g);
                                ImageIO.write(imagen, "JPG", new File(nombreFicheroCompleto));
                            } else {
                                BufferedImage imagen = new BufferedImage(vistaVector.getWidth(), vistaVector.getHeight(), 1);
                                Graphics g = imagen.getGraphics();
                                vistaVector.paint(g);
                                ImageIO.write(imagen, "PNG", new File(nombreFicheroCompleto));
                            }

                            String messageOK = "\"" + nombreFichero + "\" " + Sortrace.getIdioma().getProperty("guardarExito");
                            JOptionPane.showMessageDialog(this, messageOK, Sortrace.getIdioma().getProperty("guardarExitoTitulo"), JOptionPane.INFORMATION_MESSAGE, null);
                        }
                    }
                } catch (IOException var11) {
                    JOptionPane.showMessageDialog(this, Sortrace.getIdioma().getProperty("ioExceptionGuardar") + nombreFichero, Sortrace.getIdioma().getProperty("tituloIOException"), JOptionPane.ERROR_MESSAGE, null);
                }
                Sortrace.getConfig().modificarDirectorioImagenes(panelFileSelector.getCurrentDirectory().getAbsolutePath());
            }
        }
    }
    private void boton7MouseClicked() throws IOException {//GEN-FIRST:event_boton4MouseClicked
        // TODO add your handling code here:
        if (boton7.getToolTipText().equals(Sortrace.getIdioma().getProperty("ejecucionAvanzarPaso"))) {
            if((!ayudaCodigo) && (jTabbedPane1.getSelectedIndex()==0)){
                JOptionPane.showMessageDialog(this, Sortrace.getIdioma().getProperty("ayudaCodigoMensaje"), Sortrace.getIdioma().getProperty("ayudaCodigoTitulo"), JOptionPane.INFORMATION_MESSAGE, null);
                ayudaCodigo=true;
            }
            Sortrace.getAlgoritmo().avanzarPaso();
            this.añadirFotoSecuencia();
            this.mostrarPanelVisualizacion();
            boton1.setEnabled(false);
            boton2.setEnabled(true);
            boton3.setEnabled(true);
            boton4.setEnabled(true);
            boton5.setEnabled(true);
            boton6.setEnabled(true);
            boton7.setEnabled(true);
            boton8.setEnabled(true);
            boton9.setEnabled(true);
            boton10.setEnabled(true);
            actualizarBotonesEjecucion();
        } else if (boton7.getToolTipText().equals(Sortrace.getIdioma().getProperty("archivoExportarSecuencia"))) {
            int cont = 1;
            JFileChooser panelFileSelector = new JFileChooser();
            FileNameExtensionFilter filtroPNG = new FileNameExtensionFilter(".png", "png");
            FileNameExtensionFilter filtroJPG = new FileNameExtensionFilter(".jpg", "jpg");
            panelFileSelector.addChoosableFileFilter(filtroPNG);
            panelFileSelector.addChoosableFileFilter(filtroJPG);
            panelFileSelector.setFileFilter(filtroJPG);
            panelFileSelector.setAcceptAllFileFilterUsed(false);
            panelFileSelector.setFileSelectionMode(1);
            String dir = Sortrace.getConfig().getDirectorioImagenes();
            if (dir != null) {
                panelFileSelector.setCurrentDirectory(new File(dir));
            }

            int aceptarExportarImagen = panelFileSelector.showSaveDialog(this);
            if (aceptarExportarImagen == 0) {
                File carpetaDestino = panelFileSelector.getSelectedFile().getAbsoluteFile();

                try {
                    String extension = panelFileSelector.getFileFilter().getDescription();
                    if (panelFileSelector.getFileFilter() != null) {
                        if (!carpetaDestino.exists() && !carpetaDestino.mkdir()) {
                            throw new IOException();
                        }
                        for (BufferedImage i : imagenes) {
                            if (extension.equals(".jpg")) {
                                try {
                                    ImageIO.write(i, "JPG", new File(carpetaDestino.getAbsolutePath() + File.separator + "imagen" + cont + extension));
                                } catch (IOException e) {
                                    e.printStackTrace();
                                }
                                cont++;
                            } else {
                                try {
                                    ImageIO.write(i, "PNG", new File(carpetaDestino.getAbsolutePath() + File.separator + "imagen" + cont + extension));
                                } catch (IOException e) {
                                        e.printStackTrace();
                                }
                                cont++;
                            }
                        }
                        JOptionPane.showMessageDialog(this, Sortrace.getIdioma().getProperty("guardarSecuenciaExito"), Sortrace.getIdioma().getProperty("guardarExitoTitulo"), JOptionPane.INFORMATION_MESSAGE, null);
                    }else {
                        JOptionPane.showMessageDialog(this,Sortrace.getIdioma().getProperty("errorExtensionFichero"), Sortrace.getIdioma().getProperty("tituloErrorExtensionImagenes"), JOptionPane.ERROR_MESSAGE, null);
                    }
                }catch (IOException var8) {
                    JOptionPane.showMessageDialog(this, "errorMensajeIOExceptionGuardar", Sortrace.getIdioma().getProperty("errorTituloIOExceptionGuardar"), JOptionPane.ERROR_MESSAGE, null);
                }
                Sortrace.getConfig().modificarDirectorioImagenes(panelFileSelector.getCurrentDirectory().getAbsolutePath());
            }
        }
    }

    private void boton8MouseClicked() {//GEN-FIRST:event_boton4MouseClicked
        // TODO add your handling code here:
        if(boton8.getToolTipText().equals(Sortrace.getIdioma().getProperty("ejecucionAvanzarIteracion"))){
            if((!ayudaCodigo) && (jTabbedPane1.getSelectedIndex()==0)){
                JOptionPane.showMessageDialog(this, Sortrace.getIdioma().getProperty("ayudaCodigoMensaje"), Sortrace.getIdioma().getProperty("ayudaCodigoTitulo"), JOptionPane.INFORMATION_MESSAGE, null);
                ayudaCodigo=true;
            }
            Sortrace.getAlgoritmo().avanzarIteracion();
            try {
                sleep(100);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            this.mostrarPanelVisualizacion();
            this.añadirFotoSecuencia();
            boton1.setEnabled(false);
            boton2.setEnabled(true);
            boton3.setEnabled(true);
            boton4.setEnabled(true);
            boton5.setEnabled(true);
            boton6.setEnabled(true);
            boton7.setEnabled(true);
            boton8.setEnabled(true);
            boton9.setEnabled(true);
            boton10.setEnabled(true);
            actualizarBotonesEjecucion();
        }else if (boton8.getToolTipText().equals(Sortrace.getIdioma().getProperty("archivoExportarAnimacion"))) {
            JFileChooser panelFileSelector = new JFileChooser();
            FileNameExtensionFilter filtroGIF = new FileNameExtensionFilter(".gif", "gif");
            panelFileSelector.addChoosableFileFilter(filtroGIF);
            panelFileSelector.setFileFilter(filtroGIF);
            panelFileSelector.setAcceptAllFileFilterUsed(false);
            String dir = Sortrace.getConfig().getDirectorioImagenes();
            if (dir != null) {
                panelFileSelector.setCurrentDirectory(new File(dir));
            }

            int aceptarExportarGIF = panelFileSelector.showSaveDialog(this);
            if (aceptarExportarGIF == 0) {
                File file = panelFileSelector.getSelectedFile().getAbsoluteFile();
                String nombreGIF = file.getName();
                String nombreGIFCompleto = file.getAbsolutePath();

                try {
                    if (panelFileSelector.getFileFilter() == null && !file.getName().toLowerCase().endsWith(".gif")) {
                        JOptionPane.showMessageDialog(this, Sortrace.getIdioma().getProperty("errorExtensionFichero"), Sortrace.getIdioma().getProperty("tituloErrorExtensionImagen"), JOptionPane.ERROR_MESSAGE, null);
                    } else {
                        String extension = panelFileSelector.getFileFilter().getDescription();
                        if (!file.getName().toLowerCase().endsWith(extension)) {
                            nombreGIFCompleto = nombreGIFCompleto + extension;
                            nombreGIF = nombreGIF + extension;
                        }

                        if (!file.exists() || this.sobrescribirArchivo()) {
                            exportarAnimacion(new File(nombreGIFCompleto), 200, BufferedImage.TYPE_4BYTE_ABGR,true);
                            JOptionPane.showMessageDialog(this, nombreGIF+" "+Sortrace.getIdioma().getProperty("guardarAnimacionExito"), Sortrace.getIdioma().getProperty("guardarExitoTitulo"), JOptionPane.INFORMATION_MESSAGE, null);
                        }
                    }
                } catch (IOException var10) {
                    JOptionPane.showMessageDialog(this, Sortrace.getIdioma().getProperty("errorMensajeIOExceptionGuardar") + nombreGIF, Sortrace.getIdioma().getProperty("errorTituloIOExceptionGuardar"), JOptionPane.ERROR_MESSAGE, null);
                }
                Sortrace.getConfig().modificarDirectorioImagenes(panelFileSelector.getCurrentDirectory().getAbsolutePath());

            }
        }
    }
    private void boton9MouseClicked() {//GEN-FIRST:event_boton9MouseClicked
        if(boton9.getToolTipText().equals(Sortrace.getIdioma().getProperty("archivoSalir"))){
            this.dispose();
        }else if(boton9.getToolTipText().equals(Sortrace.getIdioma().getProperty("ejecucionAvanzarFinal"))){
            if((!ayudaCodigo) && (jTabbedPane1.getSelectedIndex()==0)){
                JOptionPane.showMessageDialog(this, Sortrace.getIdioma().getProperty("ayudaCodigoMensaje"), Sortrace.getIdioma().getProperty("ayudaCodigoTitulo"), JOptionPane.INFORMATION_MESSAGE, (Icon) null);
                ayudaCodigo=true;
            }
            Sortrace.getAlgoritmo().avanzarFinal();
            try {
                sleep(100);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            this.mostrarPanelVisualizacion();
            this.añadirFotoSecuencia();
            boton1.setEnabled(false);
            boton2.setEnabled(true);
            boton3.setEnabled(true);
            boton4.setEnabled(true);
            boton5.setEnabled(true);
            boton6.setEnabled(true);
            boton7.setEnabled(true);
            boton8.setEnabled(true);
            boton9.setEnabled(true);
            boton10.setEnabled(true);
            actualizarBotonesEjecucion();
        }
    }
    private void boton10MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_boton9MouseClicked
        if(boton10.getToolTipText().equals(Sortrace.getIdioma().getProperty("ejecucionAbandonarEjecucion"))){
            Sortrace.getAlgoritmo().terminar();
            vistaVector.actualizarVector();
            boton1.setEnabled(false);
            boton2.setEnabled(false);
            boton3.setEnabled(false);
            boton4.setEnabled(false);
            boton5.setEnabled(false);
            boton6.setEnabled(false);
            boton7.setEnabled(false);
            boton8.setEnabled(false);
            boton9.setEnabled(false);
            boton10.setEnabled(false);
            Sortrace.setAlgoritmo(null);
        }
    }
    public void actualizarBotonesArchivo(){
        boton1.setEnabled(true);
        boton2.setEnabled(true);
        boton3.setEnabled(true);
        if(Sortrace.getVector().getVector()==null){
            boton4.setEnabled(false);
            boton5.setEnabled(false);
        }else{
            boton4.setEnabled(true);
            boton5.setEnabled(true);
        }
        if((Sortrace.getVector().getVector()==null)||(Sortrace.getAlgoritmo()==null)){
            boton6.setEnabled(false);
            boton7.setEnabled(false);
            boton8.setEnabled(false);
        }else{
            boton6.setEnabled(true);
            boton7.setEnabled(true);
            boton8.setEnabled(true);
        }
    }
    public void actualizarBotonesEjecucion(){
        if(Sortrace.getAlgoritmo()==null) {
            boton1.setEnabled(false);
            boton2.setEnabled(false);
            boton3.setEnabled(false);
            boton4.setEnabled(false);
            boton5.setEnabled(false);
            boton6.setEnabled(false);
            boton7.setEnabled(false);
            boton8.setEnabled(false);
            boton9.setEnabled(false);
            boton10.setEnabled(false);
        }else if(Sortrace.getAlgoritmo().IsFinal()){
            boton1.setEnabled(false);
            boton2.setEnabled(true);
            boton3.setEnabled(true);
            boton4.setEnabled(true);
            boton5.setEnabled(true);
            boton6.setEnabled(false);
            boton7.setEnabled(false);
            boton8.setEnabled(false);
            boton9.setEnabled(false);
            boton10.setEnabled(true);
        }else if(Sortrace.getAlgoritmo().IsComienzo()){
            boton1.setEnabled(false);
            boton2.setEnabled(false);
            boton3.setEnabled(false);
            boton4.setEnabled(false);
            boton5.setEnabled(false);
            boton6.setEnabled(true);
            boton7.setEnabled(true);
            boton8.setEnabled(true);
            boton9.setEnabled(true);
            boton10.setEnabled(true);
        }
    }

    private void exportarAnimacion(File file, int delay, int imageType, boolean loop) throws IOException {
        ImageWriter writer = ImageIO.getImageWritersBySuffix("gif").next();
        ImageOutputStream ios = ImageIO.createImageOutputStream(file);
        ImageWriteParam params = writer.getDefaultWriteParam();
        ImageTypeSpecifier imageTypeSpecifier = ImageTypeSpecifier.createFromBufferedImageType(imageType);
        IIOMetadata metadata = writer.getDefaultImageMetadata(imageTypeSpecifier, params);

        String metaFormatName = metadata.getNativeMetadataFormatName();
        IIOMetadataNode root = (IIOMetadataNode) metadata.getAsTree(metaFormatName);
        //config metadata
        IIOMetadataNode graphicsControlExtensionNode = getNodeMetadata(root, "GraphicControlExtension");
        graphicsControlExtensionNode.setAttribute("disposalMethod", "none");
        graphicsControlExtensionNode.setAttribute("userInputFlag", "FALSE");
        graphicsControlExtensionNode.setAttribute("transparentColorFlag", "FALSE");
        graphicsControlExtensionNode.setAttribute("delayTime", Integer.toString(delay / 10));
        graphicsControlExtensionNode.setAttribute("transparentColorIndex", "0");

        IIOMetadataNode appExtensionsNode = getNodeMetadata(root, "ApplicationExtensions");
        IIOMetadataNode child = new IIOMetadataNode("ApplicationExtension");
        child.setAttribute("applicationID", "NETSCAPE");
        child.setAttribute("authenticationCode", "2.0");

        int loopContinuously = loop ? 0 : 1;
        child.setUserObject(new byte[]{0x1, (byte) (loopContinuously & 0xFF), (byte) ((loopContinuously >> 8) & 0xFF)});
        appExtensionsNode.appendChild(child);
        metadata.setFromTree(metaFormatName, root);
        //fin config metadata
        writer.setOutput(ios);
        writer.prepareWriteSequence(null);

        for(BufferedImage imagen:imagenes){
            writer.writeToSequence(new IIOImage(imagen, null, metadata), params);
        }
        writer.endWriteSequence();
        ios.close();
    }

    private static IIOMetadataNode getNodeMetadata(IIOMetadataNode rootNode, String nodeName) {
        int nNodes = rootNode.getLength();
        for (int i = 0; i < nNodes; i++) {
            if (rootNode.item(i).getNodeName().equalsIgnoreCase(nodeName)) {
                return (IIOMetadataNode) rootNode.item(i);
            }
        }
        IIOMetadataNode node = new IIOMetadataNode(nodeName);
        rootNode.appendChild(node);
        return (node);
    }

    private boolean sobrescribirArchivo() {
        Object[] options = new Object[]{"Aceptar", "Cancelar"};
        int opcion = JOptionPane.showOptionDialog(this, "sobrescribirArchivo", "tituloGuardar", JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE, null, options, options[0]);
        return opcion == 0;
    }
    public void subrayarComparacionCodigo(){
        if(jTabbedPane1.isEnabledAt(1)) {
            int linea = 0;
            panelTexto2.setCaretPosition(0);
            SimpleAttributeSet attrs = new SimpleAttributeSet();
            SimpleAttributeSet attrs2 = new SimpleAttributeSet();
            SimpleAttributeSet attrs3 = new SimpleAttributeSet();

            StyleConstants.setFontFamily(attrs, "alegreya sans");
            StyleConstants.setFontSize(attrs, 14);
            StyleConstants.setBackground(attrs, Color.CYAN);
            StyleConstants.setFontFamily(attrs3, "alegreya sans");
            StyleConstants.setFontSize(attrs3, 14);
            StyleConstants.setBold(attrs2, true);
            StyleConstants.setAlignment(attrs2, StyleConstants.ALIGN_CENTER);
            StyleConstants.setFontFamily(attrs2, "alegreya sans");
            StyleConstants.setFontSize(attrs2, 18);
            try {
                panelTexto2.getStyledDocument().remove(0,panelTexto2.getStyledDocument().getLength());
            } catch (BadLocationException e) {
                e.printStackTrace();
            }
            TeoriaAlgoritmo teoriaAlgoritmo = new TeoriaAlgoritmo("seleccion");
            if (Sortrace.getAlgoritmo() instanceof Seleccion) {
                linea = 5;
                teoriaAlgoritmo = new TeoriaAlgoritmo("seleccion");
                try {
                    panelTexto2.getStyledDocument().insertString(
                            panelTexto2.getStyledDocument().getLength(), Sortrace.getIdioma().getProperty("algortimosToolSeleccion") + "\n\n", attrs2);
                } catch (BadLocationException e) {
                    e.printStackTrace();
                }

            } else if (Sortrace.getAlgoritmo() instanceof BurbujaBasica) {
                linea = 3;
                teoriaAlgoritmo = new TeoriaAlgoritmo("burbujabasica");
                try {
                    panelTexto2.getStyledDocument().insertString(
                            panelTexto2.getStyledDocument().getLength(), Sortrace.getIdioma().getProperty("algortimosToolBurbujaBasica") + "\n\n", attrs2);
                } catch (BadLocationException e) {
                    e.printStackTrace();
                }

            } else if (Sortrace.getAlgoritmo() instanceof BurbujaAvanzada) {
                linea = 5;
                teoriaAlgoritmo = new TeoriaAlgoritmo("burbujaavanzada");
                try {
                    panelTexto2.getStyledDocument().insertString(
                            panelTexto2.getStyledDocument().getLength(), Sortrace.getIdioma().getProperty("algortimosToolBurbujaAvanzada") + "\n\n", attrs2);
                } catch (BadLocationException e) {
                    e.printStackTrace();
                }

            } else if (Sortrace.getAlgoritmo() instanceof Insercion) {
                linea = 4;
                teoriaAlgoritmo = new TeoriaAlgoritmo("insercion");
                try {
                    panelTexto2.getStyledDocument().insertString(
                            panelTexto2.getStyledDocument().getLength(), Sortrace.getIdioma().getProperty("algortimosToolInsercion") + "\n\n", attrs2);
                } catch (BadLocationException e) {
                    e.printStackTrace();
                }

            } else if (Sortrace.getAlgoritmo() instanceof Shell) {
                linea = 4;
                teoriaAlgoritmo = new TeoriaAlgoritmo("shell");
                try {
                    panelTexto2.getStyledDocument().insertString(
                            panelTexto2.getStyledDocument().getLength(), Sortrace.getIdioma().getProperty("algortimosToolShell") + "\n\n", attrs2);
                } catch (BadLocationException e) {
                    e.printStackTrace();
                }
            }
            String[] textoCodigo = teoriaAlgoritmo.getTextoCodigo();



            for (int i = 0; i < textoCodigo.length; i++) {
                if (i == linea) {
                    try {
                        panelTexto2.getStyledDocument().insertString(
                                panelTexto2.getStyledDocument().getLength(), textoCodigo[i], attrs);
                    } catch (BadLocationException e) {
                        e.printStackTrace();
                    }
                } else {
                    try {
                        panelTexto2.getStyledDocument().insertString(
                                panelTexto2.getStyledDocument().getLength(), textoCodigo[i], attrs3);
                    } catch (BadLocationException e) {
                        e.printStackTrace();
                    }
                }
            }
            //panelTexto2.setCaretPosition(0);
        }
    }

    public void subrayarAsignacionCodigo(){
        if(jTabbedPane1.isEnabledAt(1)) {
            int linea = 0;
            int linea1 = 0;
            int linea2 = 0;
            panelTexto2.setCaretPosition(0);
            try {
                panelTexto2.getStyledDocument().remove(0,panelTexto2.getStyledDocument().getLength());
            } catch (BadLocationException e) {
                e.printStackTrace();
            }
            SimpleAttributeSet attrs = new SimpleAttributeSet();
            SimpleAttributeSet attrs2 = new SimpleAttributeSet();
            SimpleAttributeSet attrs3 = new SimpleAttributeSet();

            StyleConstants.setFontFamily(attrs, "alegreya sans");
            StyleConstants.setFontSize(attrs, 14);
            StyleConstants.setBackground(attrs, Color.YELLOW);
            StyleConstants.setFontFamily(attrs3, "alegreya sans");
            StyleConstants.setFontSize(attrs3, 14);
            StyleConstants.setBold(attrs2, true);
            StyleConstants.setAlignment(attrs2, StyleConstants.ALIGN_CENTER);
            StyleConstants.setFontFamily(attrs2, "alegreya sans");
            StyleConstants.setFontSize(attrs2, 18);
            TeoriaAlgoritmo teoriaAlgoritmo = new TeoriaAlgoritmo("seleccion");
            if (Sortrace.getAlgoritmo() instanceof Seleccion) {
                linea = 7;
                linea1 = 8;
                linea2 = 9;
                teoriaAlgoritmo = new TeoriaAlgoritmo("seleccion");
                try {
                    panelTexto2.getStyledDocument().insertString(
                            panelTexto2.getStyledDocument().getLength(), Sortrace.getIdioma().getProperty("algortimosToolSeleccion") + "\n\n", attrs2);
                } catch (BadLocationException e) {
                    e.printStackTrace();
                }

            } else if (Sortrace.getAlgoritmo() instanceof BurbujaBasica) {
                linea = 4;
                linea1 = 5;
                linea2 = 6;
                teoriaAlgoritmo = new TeoriaAlgoritmo("burbujabasica");
                try {
                    panelTexto2.getStyledDocument().insertString(
                            panelTexto2.getStyledDocument().getLength(), Sortrace.getIdioma().getProperty("algortimosToolBurbujaBasica") + "\n\n", attrs2);
                } catch (BadLocationException e) {
                    e.printStackTrace();
                }


            } else if (Sortrace.getAlgoritmo() instanceof BurbujaAvanzada) {
                linea = 6;
                linea1 = 7;
                linea2 = 8;
                teoriaAlgoritmo = new TeoriaAlgoritmo("burbujaavanzada");
                try {
                    panelTexto2.getStyledDocument().insertString(
                            panelTexto2.getStyledDocument().getLength(), Sortrace.getIdioma().getProperty("algortimosToolBurbujaAvanzada") + "\n\n", attrs2);
                } catch (BadLocationException e) {
                    e.printStackTrace();
                }

            } else if (Sortrace.getAlgoritmo() instanceof Insercion) {
                linea = 5;
                linea1 = 7;
                linea2 = 100;
                teoriaAlgoritmo = new TeoriaAlgoritmo("insercion");
                try {
                    panelTexto2.getStyledDocument().insertString(
                            panelTexto2.getStyledDocument().getLength(), Sortrace.getIdioma().getProperty("algortimosToolInsercion") + "\n\n", attrs2);
                } catch (BadLocationException e) {
                    e.printStackTrace();
                }

            } else if (Sortrace.getAlgoritmo() instanceof Shell) {
                linea = 5;
                linea1 = 6;
                linea2 = 7;
                teoriaAlgoritmo = new TeoriaAlgoritmo("shell");
                try {
                    panelTexto2.getStyledDocument().insertString(
                            panelTexto2.getStyledDocument().getLength(), Sortrace.getIdioma().getProperty("algortimosToolShell") + "\n\n", attrs2);
                } catch (BadLocationException e) {
                    e.printStackTrace();
                }
            }
            String[] textoCodigo = teoriaAlgoritmo.getTextoCodigo();



            for (int i = 0; i < textoCodigo.length; i++) {
                if ((i == linea) || (i==linea1) || (i==linea2)) {
                    try {
                        panelTexto2.getStyledDocument().insertString(
                                panelTexto2.getStyledDocument().getLength(), textoCodigo[i], attrs);
                    } catch (BadLocationException e) {
                        e.printStackTrace();
                    }
                } else {
                    try {
                        panelTexto2.getStyledDocument().insertString(
                                panelTexto2.getStyledDocument().getLength(), textoCodigo[i], attrs3);
                    } catch (BadLocationException e) {
                        e.printStackTrace();
                    }
                }
            }
            //panelTexto2.setCaretPosition(0);
        }
    }
    public boolean cambioIdioma(String idiomaSeleccionado){
        if(idiomaSeleccionado.equals("ESPAÑOL") || idiomaSeleccionado.equals("SPANISH")){
            return (Sortrace.getConfig().getIdioma().equals("INGLES") || Sortrace.getConfig().getIdioma().equals("ENGLISH"));
        }else{
            return (Sortrace.getConfig().getIdioma().equals("ESPAÑOL") || Sortrace.getConfig().getIdioma().equals("SPANISH"));
        }
    }
    public void actualizarPantalla(MouseEvent evt){
        actualizarPanelTeoria();
        actualizarMenu(evt);
        actualizarVista();
        actualizarModo();
    }

    public void actualizarMenu(MouseEvent evt){
        menuArchivo.setText(Sortrace.getIdioma().getProperty("menuArchivo"));
        menuEjecucion.setText(Sortrace.getIdioma().getProperty("menuEjecucion"));
        menuAlgoritmos.setText(Sortrace.getIdioma().getProperty("menuAlgoritmo"));
        menuConfiguracion.setText(Sortrace.getIdioma().getProperty("menuConfiguracion"));
        menuAyuda.setText(Sortrace.getIdioma().getProperty("menuAyuda"));

        menuConfiguracionMouseClicked(evt);
    }

    public void actualizarVista(){
        if((Sortrace.getAlgoritmo()!=null) && (Sortrace.getVector().getVector()!=null)){
            vistaVector.actualizarVector();
        }
    }

    public void actualizarPanelTeoria(){
        jTabbedPane1.setTitleAt(0,Sortrace.getIdioma().getProperty("teoriaPaginaTeoria"));
        jTabbedPane1.setTitleAt(1,Sortrace.getIdioma().getProperty("teoriaPaginaCodigo"));

        if(Sortrace.getAlgoritmo()!=null) {
            panelTexto = new JTextPane();
            panelTexto2 = new JTextPane();

            jScrollPane1.setViewportView(panelTexto);
            jScrollPane2.setViewportView(panelTexto2);
            SimpleAttributeSet attrs = new SimpleAttributeSet();
            SimpleAttributeSet attrs2 = new SimpleAttributeSet();
            SimpleAttributeSet attrs3 = new SimpleAttributeSet();

            StyleConstants.setFontFamily(attrs3, "alegreya sans");
            StyleConstants.setFontSize(attrs3, 14);
            StyleConstants.setBold(attrs2, true);
            StyleConstants.setAlignment(attrs2, StyleConstants.ALIGN_CENTER);
            StyleConstants.setFontFamily(attrs2, "alegreya sans");
            StyleConstants.setFontSize(attrs2, 18);


            TeoriaAlgoritmo teoriaAlgoritmo = new TeoriaAlgoritmo("seleccion");
            if (Sortrace.getAlgoritmo() instanceof Seleccion) {
                teoriaAlgoritmo = new TeoriaAlgoritmo("seleccion");
                try {
                    panelTexto.getStyledDocument().insertString(
                            panelTexto.getStyledDocument().getLength(), Sortrace.getIdioma().getProperty("algortimosToolSeleccion") + "\n\n", attrs2);
                    panelTexto2.getStyledDocument().insertString(
                            panelTexto2.getStyledDocument().getLength(), Sortrace.getIdioma().getProperty("algortimosToolSeleccion") + "\n\n", attrs2);
                } catch (BadLocationException e) {
                    e.printStackTrace();
                }

            } else if (Sortrace.getAlgoritmo() instanceof BurbujaBasica) {
                teoriaAlgoritmo = new TeoriaAlgoritmo("burbujabasica");
                try {
                    panelTexto.getStyledDocument().insertString(
                            panelTexto.getStyledDocument().getLength(), Sortrace.getIdioma().getProperty("algortimosToolBurbujaBasica") + "\n\n", attrs2);
                    panelTexto2.getStyledDocument().insertString(
                            panelTexto2.getStyledDocument().getLength(), Sortrace.getIdioma().getProperty("algortimosToolBurbujaBasica") + "\n\n", attrs2);
                } catch (BadLocationException e) {
                    e.printStackTrace();
                }

            } else if (Sortrace.getAlgoritmo() instanceof BurbujaAvanzada) {
                teoriaAlgoritmo = new TeoriaAlgoritmo("burbujaavanzada");
                try {
                    panelTexto.getStyledDocument().insertString(
                            panelTexto.getStyledDocument().getLength(), Sortrace.getIdioma().getProperty("algortimosToolBurbujaAvanzada") + "\n\n", attrs2);
                    panelTexto2.getStyledDocument().insertString(
                            panelTexto2.getStyledDocument().getLength(), Sortrace.getIdioma().getProperty("algortimosToolBurbujaAvanzada") + "\n\n", attrs2);
                } catch (BadLocationException e) {
                    e.printStackTrace();
                }

            } else if (Sortrace.getAlgoritmo() instanceof Insercion) {
                teoriaAlgoritmo = new TeoriaAlgoritmo("insercion");
                try {
                    panelTexto.getStyledDocument().insertString(
                            panelTexto.getStyledDocument().getLength(), Sortrace.getIdioma().getProperty("algortimosToolInsercion") + "\n\n", attrs2);
                    panelTexto2.getStyledDocument().insertString(
                            panelTexto2.getStyledDocument().getLength(), Sortrace.getIdioma().getProperty("algortimosToolInsercion") + "\n\n", attrs2);
                } catch (BadLocationException e) {
                    e.printStackTrace();
                }

            } else if (Sortrace.getAlgoritmo() instanceof Shell) {
                teoriaAlgoritmo = new TeoriaAlgoritmo("shell");
                try {
                    panelTexto.getStyledDocument().insertString(
                            panelTexto.getStyledDocument().getLength(), Sortrace.getIdioma().getProperty("algortimosToolShell") + "\n\n", attrs2);
                    panelTexto2.getStyledDocument().insertString(
                            panelTexto2.getStyledDocument().getLength(), Sortrace.getIdioma().getProperty("algortimosToolShell") + "\n\n", attrs2);
                } catch (BadLocationException e) {
                    e.printStackTrace();
                }
            }
            String[] texto = teoriaAlgoritmo.getTexto();
            String[] textoCodigo = teoriaAlgoritmo.getTextoCodigo();
            ImageIcon[] imagenes = teoriaAlgoritmo.getIcons();

            for (int i = 0; i < texto.length; i++) {
                try {
                    panelTexto.getStyledDocument().insertString(
                            panelTexto.getStyledDocument().getLength(), texto[i], attrs);
                } catch (BadLocationException e) {
                    e.printStackTrace();
                }
                if (i < imagenes.length) {
                    panelTexto.setCaretPosition(panelTexto.getStyledDocument().getLength());
                    panelTexto.insertIcon(imagenes[i]);
                }
            }
            for (String codigo : textoCodigo) {
                try {
                    panelTexto2.getStyledDocument().insertString(
                            panelTexto2.getStyledDocument().getLength(), codigo, attrs3);
                } catch (BadLocationException e) {
                    e.printStackTrace();
                }
            }
            panelTexto.setCaretPosition(0);
            panelTexto2.setCaretPosition(0);

        }
    }

    public void actualizarPanelCodigo(){
        if(jTabbedPane1.isEnabledAt(1)) {
            panelTexto2.setCaretPosition(0);
            try {
                panelTexto2.getStyledDocument().remove(0,panelTexto2.getStyledDocument().getLength());
            } catch (BadLocationException e) {
                e.printStackTrace();
            }
            SimpleAttributeSet attrs = new SimpleAttributeSet();
            SimpleAttributeSet attrs2 = new SimpleAttributeSet();
            SimpleAttributeSet attrs3 = new SimpleAttributeSet();

            StyleConstants.setFontFamily(attrs, "alegreya sans");
            StyleConstants.setFontSize(attrs, 14);
            StyleConstants.setBackground(attrs, Color.CYAN);
            StyleConstants.setFontFamily(attrs3, "alegreya sans");
            StyleConstants.setFontSize(attrs3, 14);
            StyleConstants.setBold(attrs2, true);
            StyleConstants.setAlignment(attrs2, StyleConstants.ALIGN_CENTER);
            StyleConstants.setFontFamily(attrs2, "alegreya sans");
            StyleConstants.setFontSize(attrs2, 18);
            TeoriaAlgoritmo teoriaAlgoritmo = new TeoriaAlgoritmo("seleccion");
            if (Sortrace.getAlgoritmo() instanceof Seleccion) {
                teoriaAlgoritmo = new TeoriaAlgoritmo("seleccion");
                try {
                    panelTexto2.getStyledDocument().insertString(
                            panelTexto2.getStyledDocument().getLength(), Sortrace.getIdioma().getProperty("algortimosToolSeleccion") + "\n\n", attrs2);
                } catch (BadLocationException e) {
                    e.printStackTrace();
                }

            } else if (Sortrace.getAlgoritmo() instanceof BurbujaBasica) {
                teoriaAlgoritmo = new TeoriaAlgoritmo("burbujabasica");
                try {
                    panelTexto2.getStyledDocument().insertString(
                            panelTexto2.getStyledDocument().getLength(), Sortrace.getIdioma().getProperty("algortimosToolBurbujaBasica") + "\n\n", attrs2);
                } catch (BadLocationException e) {
                    e.printStackTrace();
                }

            } else if (Sortrace.getAlgoritmo() instanceof BurbujaAvanzada) {
                teoriaAlgoritmo = new TeoriaAlgoritmo("burbujaavanzada");
                try {
                    panelTexto2.getStyledDocument().insertString(
                            panelTexto2.getStyledDocument().getLength(), Sortrace.getIdioma().getProperty("algortimosToolBurbujaAvanzada") + "\n\n", attrs2);
                } catch (BadLocationException e) {
                    e.printStackTrace();
                }

            } else if (Sortrace.getAlgoritmo() instanceof Insercion) {
                teoriaAlgoritmo = new TeoriaAlgoritmo("insercion");
                try {
                    panelTexto2.getStyledDocument().insertString(
                            panelTexto2.getStyledDocument().getLength(), Sortrace.getIdioma().getProperty("algortimosToolInsercion") + "\n\n", attrs2);
                } catch (BadLocationException e) {
                    e.printStackTrace();
                }

            } else if (Sortrace.getAlgoritmo() instanceof Shell) {
                teoriaAlgoritmo = new TeoriaAlgoritmo("shell");
                try {
                    panelTexto2.getStyledDocument().insertString(
                            panelTexto2.getStyledDocument().getLength(), Sortrace.getIdioma().getProperty("algortimosToolShell") + "\n\n", attrs2);
                } catch (BadLocationException e) {
                    e.printStackTrace();
                }
            }
            String[] textoCodigo = teoriaAlgoritmo.getTextoCodigo();

            for (String codigo : textoCodigo) {
                try {

                    panelTexto2.getStyledDocument().insertString(
                            panelTexto2.getStyledDocument().getLength(), codigo, attrs3);
                } catch (BadLocationException e) {
                    e.printStackTrace();
                }
            }
            //panelTexto2.setCaretPosition(0);
        }
    }

    public void actualizarModo(){
        if(Sortrace.getConfig().getModo().equals("si")) {
            UIManager.put("OptionPane.background", Sortrace.getConfig().getPanelModoOscuro());
            UIManager.put("OptionPane.foreground", Sortrace.getConfig().getTextoModoOscuro());
            UIManager.put("OptionPane.messageForeground", Sortrace.getConfig().getTextoModoOscuro());
            UIManager.put("Panel.background", Sortrace.getConfig().getPanelModoOscuro());
            UIManager.put("Button.background", Sortrace.getConfig().getBotonModoOscuro());
            UIManager.put("ComboBox.background", Sortrace.getConfig().getBotonModoOscuro());
            UIManager.put("ComboBox.foreground", Sortrace.getConfig().getTextoModoOscuro());
            UIManager.put("TextField.background", Sortrace.getConfig().getBotonModoOscuro());
            UIManager.put("TextField.foreground", Sortrace.getConfig().getTextoModoOscuro());
            UIManager.put("ToolBar.background", Sortrace.getConfig().getPanelModoOscuro());
            UIManager.put("Viewport.background", Sortrace.getConfig().getPanelModoOscuro());
            UIManager.put("Viewport.foreground", Sortrace.getConfig().getTextoModoOscuro());
            UIManager.put("ScrollPane.background", Sortrace.getConfig().getPanelModoOscuro());
            UIManager.put("List.background", Sortrace.getConfig().getPanelModoOscuro());
            UIManager.put("List.foreground", Sortrace.getConfig().getTextoModoOscuro());
            UIManager.put("Label.foreground", Sortrace.getConfig().getTextoModoOscuro());
            UIManager.put("Button.foreground", Sortrace.getConfig().getTextoModoOscuro());
            this.getContentPane().setBackground(Sortrace.getConfig().getFondoModoOscuro());
            jPanel1.setBackground(Sortrace.getConfig().getPanelModoOscuro());
            boton1.setBackground(Sortrace.getConfig().getBotonModoOscuro());
            boton1.setForeground(Sortrace.getConfig().getTextoModoOscuro());
            boton2.setBackground(Sortrace.getConfig().getBotonModoOscuro());
            boton2.setForeground(Sortrace.getConfig().getTextoModoOscuro());
            boton3.setBackground(Sortrace.getConfig().getBotonModoOscuro());
            boton3.setForeground(Sortrace.getConfig().getTextoModoOscuro());
            boton4.setBackground(Sortrace.getConfig().getBotonModoOscuro());
            boton4.setForeground(Sortrace.getConfig().getTextoModoOscuro());
            boton5.setBackground(Sortrace.getConfig().getBotonModoOscuro());
            boton5.setForeground(Sortrace.getConfig().getTextoModoOscuro());
            boton6.setBackground(Sortrace.getConfig().getBotonModoOscuro());
            boton6.setForeground(Sortrace.getConfig().getTextoModoOscuro());
            boton7.setBackground(Sortrace.getConfig().getBotonModoOscuro());
            boton7.setForeground(Sortrace.getConfig().getTextoModoOscuro());
            boton8.setBackground(Sortrace.getConfig().getBotonModoOscuro());
            boton8.setForeground(Sortrace.getConfig().getTextoModoOscuro());
            boton9.setBackground(Sortrace.getConfig().getBotonModoOscuro());
            boton9.setForeground(Sortrace.getConfig().getTextoModoOscuro());
            boton10.setBackground(Sortrace.getConfig().getBotonModoOscuro());
            boton10.setForeground(Sortrace.getConfig().getTextoModoOscuro());
            jLayeredPane1.setBackground(Sortrace.getConfig().getPanelModoOscuro());
            jMenuBar1.setBackground(Sortrace.getConfig().getFondoModoOscuro());
            jMenuBar1.setForeground(Sortrace.getConfig().getTextoModoOscuro());
            jPanelVistaVector.setBackground(Sortrace.getConfig().getPanelModoOscuro());
            jPanel2.setBackground(Sortrace.getConfig().getPanelModoOscuro());
            panelVisualizacion.setBackground(Sortrace.getConfig().getPanelModoOscuro());
            jScrollPane1.setBackground(Sortrace.getConfig().getPanelModoOscuro());
            jScrollPane2.setBackground(Sortrace.getConfig().getPanelModoOscuro());
            jScrollPane3.setBackground(Sortrace.getConfig().getPanelModoOscuro());
            jTabbedPane1.setBackground(Sortrace.getConfig().getPanelModoOscuro());
            jTabbedPane1.setBackgroundAt(0,Sortrace.getConfig().getFondoModoOscuro());
            jTabbedPane1.setBackgroundAt(1,Sortrace.getConfig().getFondoModoOscuro());
            jTabbedPane1.setForegroundAt(0,Sortrace.getConfig().getTextoModoOscuro());
            jTabbedPane1.setForegroundAt(1,Sortrace.getConfig().getTextoModoOscuro());

            jToolBar1.setBackground(Sortrace.getConfig().getFondoModoOscuro());
            menuAlgoritmos.setBackground(Sortrace.getConfig().getFondoModoOscuro());
            menuAlgoritmos.setForeground(Sortrace.getConfig().getTextoModoOscuro());
            menuArchivo.setBackground(Sortrace.getConfig().getFondoModoOscuro());
            menuArchivo.setForeground(Sortrace.getConfig().getTextoModoOscuro());
            menuAyuda.setBackground(Sortrace.getConfig().getFondoModoOscuro());
            menuAyuda.setForeground(Sortrace.getConfig().getTextoModoOscuro());
            menuConfiguracion.setBackground(Sortrace.getConfig().getFondoModoOscuro());
            menuConfiguracion.setForeground(Sortrace.getConfig().getTextoModoOscuro());
            menuEjecucion.setBackground(Sortrace.getConfig().getFondoModoOscuro());
            menuEjecucion.setForeground(Sortrace.getConfig().getTextoModoOscuro());
            panelTexto.setBackground(Sortrace.getConfig().getPanelModoOscuro());
            panelTexto.setForeground(Sortrace.getConfig().getTextoModoOscuro());
            panelTexto2.setBackground(Sortrace.getConfig().getPanelModoOscuro());
            panelTexto2.setForeground(Sortrace.getConfig().getTextoModoOscuro());
            vistaVector.setBackground(Sortrace.getConfig().getPanelModoOscuro());

            //vistaVector;
        }else{
            UIDefaults defecto= new UIDefaults();
            UIManager.put("OptionPane.background", defecto.getColor("OptionPane.background"));
            UIManager.put("OptionPane.foreground", defecto.getColor("OptionPane.foreground"));
            UIManager.put("OptionPane.messageForeground", defecto.getColor("OptionPane.messageForeground"));
            UIManager.put("Panel.background", defecto.getColor("Panel.background"));
            UIManager.put("Button.background", defecto.getColor("Button.background"));
            UIManager.put("ComboBox.background", defecto.getColor("ComboBox.background"));
            UIManager.put("ComboBox.foreground", defecto.getColor("ComboBox.foreground"));
            UIManager.put("TextField.background", defecto.getColor("TextField.background"));
            UIManager.put("TextField.foreground", defecto.getColor("TextField.foreground"));
            UIManager.put("ToolBar.background", defecto.getColor("ToolBar.background"));
            UIManager.put("Viewport.background", defecto.getColor("Viewport.background"));
            UIManager.put("Viewport.foreground", defecto.getColor("Viewport.foreground"));
            UIManager.put("ScrollPane.background", defecto.getColor("ScrollPane.background"));
            UIManager.put("List.background", defecto.getColor("List.background"));
            UIManager.put("List.foreground", defecto.getColor("List.foreground"));
            UIManager.put("Label.foreground", defecto.getColor("Label.foreground"));
            UIManager.put("Button.foreground", defecto.getColor("Button.foreground"));
            this.getContentPane().setBackground(UIManager.getColor ("JFrame.background"));
            jPanel1.setBackground(UIManager.getColor ("JPanel.background"));
            boton1.setBackground(UIManager.getColor("JButton.background"));
            boton1.setForeground(UIManager.getColor("JButton.foreground"));
            boton2.setBackground(UIManager.getColor("JButton.background"));
            boton2.setForeground(UIManager.getColor("JButton.foreground"));
            boton3.setBackground(UIManager.getColor("JButton.background"));
            boton3.setForeground(UIManager.getColor("JButton.foreground"));
            boton4.setBackground(UIManager.getColor("JButton.background"));
            boton4.setForeground(UIManager.getColor("JButton.foreground"));
            boton5.setBackground(UIManager.getColor("JButton.background"));
            boton5.setForeground(UIManager.getColor("JButton.foreground"));
            boton6.setBackground(UIManager.getColor("JButton.background"));
            boton6.setForeground(UIManager.getColor("JButton.foreground"));
            boton7.setBackground(UIManager.getColor("JButton.background"));
            boton7.setForeground(UIManager.getColor("JButton.foreground"));
            boton8.setBackground(UIManager.getColor("JButton.background"));
            boton8.setForeground(UIManager.getColor("JButton.foreground"));
            boton9.setBackground(UIManager.getColor("JButton.background"));
            boton9.setForeground(UIManager.getColor("JButton.foreground"));
            boton10.setBackground(UIManager.getColor("JButton.background"));
            boton10.setForeground(UIManager.getColor("JButton.foreground"));
            jLayeredPane1.setBackground(UIManager.getColor ("JLayeredPane.background"));
            jMenuBar1.setBackground(UIManager.getColor ("jMenuBar.background"));
            jMenuBar1.setForeground(UIManager.getColor ("jMenuBar.foreground"));
            jPanelVistaVector.setBackground(UIManager.getColor ("jMenuBar.background"));
            jPanel2.setBackground(UIManager.getColor ("jPanel.background"));
            panelVisualizacion.setBackground(UIManager.getColor ("jPanel.background"));
            jScrollPane1.setBackground(UIManager.getColor ("jScrollPane.background"));
            jScrollPane2.setBackground(UIManager.getColor ("jScrollPane.background"));
            jScrollPane3.setBackground(UIManager.getColor ("jScrollPane.background"));
            jTabbedPane1.setBackground(UIManager.getColor ("jTabbedPane.background"));
            jTabbedPane1.setBackgroundAt(0,UIManager.getColor ("jTab.background"));
            jTabbedPane1.setBackgroundAt(1,UIManager.getColor ("jTab.background"));
            jTabbedPane1.setForegroundAt(0,UIManager.getColor ("jTab.foreground"));
            jTabbedPane1.setForegroundAt(1,UIManager.getColor ("jTab.foreground"));
            jToolBar1.setBackground(UIManager.getColor ("jToolBar.background"));
            menuAlgoritmos.setBackground(UIManager.getColor ("jMenu.background"));
            menuAlgoritmos.setForeground(UIManager.getColor ("jMenu.foreground"));
            menuArchivo.setBackground(UIManager.getColor ("jMenu.background"));
            menuArchivo.setForeground(UIManager.getColor ("jMenu.foreground"));
            menuAyuda.setBackground(UIManager.getColor ("jMenu.background"));
            menuAyuda.setForeground(UIManager.getColor ("jMenu.foreground"));
            menuConfiguracion.setBackground(UIManager.getColor ("jMenu.background"));
            menuConfiguracion.setForeground(UIManager.getColor ("jMenu.foreground"));
            menuEjecucion.setBackground(UIManager.getColor ("jMenu.background"));
            menuEjecucion.setForeground(UIManager.getColor ("jMenu.foreground"));
            panelTexto.setBackground(UIManager.getColor ("JTextPane.background"));
            panelTexto.setForeground(UIManager.getColor ("JTextPane.foreground"));
            panelTexto2.setBackground(UIManager.getColor ("JTextPane.background"));
            panelTexto2.setForeground(UIManager.getColor ("JTextPane.foreground"));
            vistaVector.setBackground(UIManager.getColor ("JPanel.foreground"));
            //vistaVector;
        }
    }
    public void añadirFotoSecuencia(){
        if (Sortrace.getAlgoritmo().IsComienzo()){
            imagenes= new ArrayList<>();
        }else{
            BufferedImage imagen = new BufferedImage(vistaVector.getWidth()*2/3, vistaVector.getHeight(), 1);
            Graphics g = imagen.getGraphics();
            vistaVector.paint(g);
            imagenes.add(imagen);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Pantalla.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Pantalla().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton boton1;
    private javax.swing.JButton boton10;
    private javax.swing.JButton boton2;
    private javax.swing.JButton boton3;
    private javax.swing.JButton boton4;
    private javax.swing.JButton boton5;
    private javax.swing.JButton boton6;
    private javax.swing.JButton boton7;
    private javax.swing.JButton boton8;
    private javax.swing.JButton boton9;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanelVistaVector;
    private javax.swing.JPanel jPanel2;
    private JPanel panelVisualizacion;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JMenu menuAlgoritmos;
    private javax.swing.JMenu menuArchivo;
    private javax.swing.JMenu menuAyuda;
    private javax.swing.JMenu menuConfiguracion;
    private javax.swing.JMenu menuEjecucion;
    private javax.swing.JTextPane panelTexto;
    private javax.swing.JTextPane panelTexto2;
    private VistaVector vistaVector;
    private Dimension dimPred;
    private ArrayList<BufferedImage> imagenes= new ArrayList<>();
    private boolean ayudaCodigo=false;
    // End of variables declaration//GEN-END:variables
    private IntroducirNumeros_IU intNum;
}
